[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Health Informaticist",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "The Health Informaticist",
    "section": "Why?",
    "text": "Why?\nI started off, and still identify as a nurse, but now find myself somewhere between the interaction of clinician and technologist. My job as a professor involves teaching, and constantly aquiring new knowledge, abilities, and skills (KSAs) between evidence based medicine (EBM) and technology-focused tools that could be used to help us address these issues. My curiosity and passion for BOTH healthcare and technology has led me to pursue a variety of topics that I try to address in this book. So what does this book cover?\nThis book covers python, healthcare data, medical codexes, open source datasets, databases, cloud technologies, inferential statistics and machine learning, visualizations, and related technologies important to understand as a modern (future) health informaticsts.\nI’ve created this book as the most important topics to me, and what I have experienced within academic medical hospital systems, private hospitals, consulting, and health tech-startups. So whether you’re a healthcare professional, data scientist, student, or enthusiast, this book will offer you valuable insights and hopefully fun conversation and dialgue related to what can be dry and boring material.\n\nWhat You’ll Find Here:\n\nA Broad Foundation: Rather than in-depth on each topic, this book provides a wide overview, giving you a base to explore further.\n\nAn intro to…Python\nAn intro to…Healthcare Data\nAn intro to…Inferential Statistics\nAn intro to…Ai and Machine Learning\nAn intro to…Supporting Cloud Technologies\n\nHands-On Learning: Chapters combine theory and practical examples, allowing you to apply what you learn through Pyodide-powered, interactive Python exercises.\n\n\n\nThink Legos…\nThink of each section as a component, or a lego, that when combined together can lead to the creation of something useful. These core technologies: databases, scripts, clouds, code languages, databases, medical codexes…etc that we will be exploring should be viewed as individual lego pieces. It is our job as health informaticists to understand which pieces exist, what they are capability of providing to us, and then how we can put them together to make something unique and useful. Key word is useful.\n\n\n\nImage of LEGO bricks as a metaphor for learning blocks",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "python_hello_world.html",
    "href": "python_hello_world.html",
    "title": "2  Python Code - 1 - Hello World",
    "section": "",
    "text": "2.1 Objectives\nThe aim of this exercise is to learn how to write and execute Python code.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - 1 - Hello World</span>"
    ]
  },
  {
    "objectID": "python_hello_world.html#rationale",
    "href": "python_hello_world.html#rationale",
    "title": "2  Python Code - 1 - Hello World",
    "section": "2.2 Rationale",
    "text": "2.2 Rationale\nThere are plenty of programing languages, but all of them share some common principles. Computers execute machine code, a binary set of instructions that are carried out by the computer processors, but usually human do not write binary machine code, or even assembly language, the written code directly translatable to machine code.\nMost of the time programers write code in languages that are easier to write and read by us, humans. These codes, in turn, have to be translated to machine code. This process of translation is called compilation. Compilation is a complex process that comprises several steps, and different compilers and programming languages divide theses steps differently. There are compilers, like the C or C++ compiles, that take the code and compile it into a binary executable that can be directly run in a computer, while there are other, like the Python interpreter of the Java compiler, that are capable of running directly the human readable code that create an intermediate representation called bytecode. In these cases we need to install the language interpreter to run the program. For instance, if you want to run a Java or Python program you will need to install Java or Python before.\nPython is an interpreted language, so, once you install Python you will be able to directly run Python code. However, you first need to have Python available in your computer.\nThere are many ways of installing Python like:\n\nDownloading Python from python.org.\nUsing the Windows store or the Linux packages already prepared.\nUsing a Python version manager like uv.\nHaving Python included in your web browser thanks to Pyodide.\n\nIn this exercise we are going to use Pyodide, a Python version that allow us to run Python code directly in a web page without requiring any previous installation.\nThe Notebook document is composed by cells, some are text (in markdown format), and others contain Python code that can be executed. To execute a Python cell:\n\nSelect the cell that you want to execute.\nClick the play symbol on top of the page or press shift + enter.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - 1 - Hello World</span>"
    ]
  },
  {
    "objectID": "python_hello_world.html#print-hello-world",
    "href": "python_hello_world.html#print-hello-world",
    "title": "2  Python Code - 1 - Hello World",
    "section": "2.3 Print Hello world",
    "text": "2.3 Print Hello world",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - 1 - Hello World</span>"
    ]
  },
  {
    "objectID": "python_hello_world.html#print-hello-your-name",
    "href": "python_hello_world.html#print-hello-your-name",
    "title": "2  Python Code - 1 - Hello World",
    "section": "2.4 Print Hello “Your Name”",
    "text": "2.4 Print Hello “Your Name”\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint('Jane')",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - 1 - Hello World</span>"
    ]
  },
  {
    "objectID": "python_flow_variables.html",
    "href": "python_flow_variables.html",
    "title": "3  Python Code - 2 - Flow and Variables",
    "section": "",
    "text": "3.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - 2 - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "python_flow_variables.html#resources",
    "href": "python_flow_variables.html#resources",
    "title": "3  Python Code - 2 - Flow and Variables",
    "section": "",
    "text": "Variables in Python in Real Python.\nprint function official documentation.\nA print function tutorial in Real Python.\nVariable unpaking tutorial in Real Python.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - 2 - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "python_flow_variables.html#flow",
    "href": "python_flow_variables.html#flow",
    "title": "3  Python Code - 2 - Flow and Variables",
    "section": "3.2 Flow",
    "text": "3.2 Flow\nThe computer executes the programming code one line (or statement) at a time. The order in which the lines are executed is called flow.\n\n\n\n\n\n\nOrder the lines in the following code, we want the computer to first say Hello, then Your Name, and, finally, an invitation to play.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that the lines are executed in order, so change the order of the lines.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"Hello\")\nprint(\"John\")\nprint(\"Do you want to play a nice game of chess?\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - 2 - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "python_flow_variables.html#variables",
    "href": "python_flow_variables.html#variables",
    "title": "3  Python Code - 2 - Flow and Variables",
    "section": "3.3 Variables",
    "text": "3.3 Variables\nWhen we run programs we store information in the memory of the computer for later use. This is a fundamental idea in computers. You can think about the memory of a computer as a file cabinet in which we can store values like numbers and strings of letters. Internally the memory is divided in small pieces, like the drawers of a filing cabinet, and the computer assings a numeric adress to each of those drawers. So, for instance, we could tell the computer to store the number 42 in the address 00000100, but it would be very cumbersome to use these numeric addresses, so, instead, the we use variables, names that we create, to refer to the memory locations and contents.\nIn different programming languages a variable can refer to the value stored or to the memory address (pointer). In Python a variable will always be a reference to the object stored. You can think of it as a label in the file cabinet drawer or an arrow that points to the drawer.\nIn Python we store a variable in memory by using the assigment operator =.\n\n\n\n\n\n\nPython is doing quite a lot of things for us when we write “favorite_number = 42”:\n\nIt reserves a space in the memory to be able to store the object that is going to create.\nIt creates the object 42.\nIt assigns the favorite_number variable as a reference to the created and stored object.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - 2 - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "python_flow_variables.html#create-and-print-variables",
    "href": "python_flow_variables.html#create-and-print-variables",
    "title": "3  Python Code - 2 - Flow and Variables",
    "section": "3.4 Create and print variables",
    "text": "3.4 Create and print variables\nCreate two variables, one with your name, and another one with your surname and print them.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite the name and year of release of any movie using two variables.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - 2 - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "python_flow_variables.html#change-the-value-of-a-variable",
    "href": "python_flow_variables.html#change-the-value-of-a-variable",
    "title": "3  Python Code - 2 - Flow and Variables",
    "section": "3.5 Change the value of a variable",
    "text": "3.5 Change the value of a variable\nThe variables can be changed to refer to different values/objects. Fix the program to show your real name by changing the value of the variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the following code, think about the expected output, what will the program print when you execute it?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - 2 - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "python_flow_variables.html#variables-are-not-text-strings",
    "href": "python_flow_variables.html#variables-are-not-text-strings",
    "title": "3  Python Code - 2 - Flow and Variables",
    "section": "3.6 Variables are not text strings",
    "text": "3.6 Variables are not text strings\nFix the following code to print the correct name of your Pokemons.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that variable names are not enclosed by quotes and that if you put something inside a quote Python will consider it a text string.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is very important to understand the difference between variables and text:\n\nvariable names are not enclosed by quotes.\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - 2 - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "python_flow_variables.html#assignment-unpaking",
    "href": "python_flow_variables.html#assignment-unpaking",
    "title": "3  Python Code - 2 - Flow and Variables",
    "section": "3.7 Assignment unpaking",
    "text": "3.7 Assignment unpaking\nPython allows for several variables to be set at the same time.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - 2 - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "python_types.html",
    "href": "python_types.html",
    "title": "4  Python Code - 3 - Types",
    "section": "",
    "text": "4.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - 3 - Types</span>"
    ]
  },
  {
    "objectID": "python_types.html#resources",
    "href": "python_types.html#resources",
    "title": "4  Python Code - 3 - Types",
    "section": "",
    "text": "Real Python tutorial: basic data types\nOfficial documentation: types and operations.\nBasic introduction to type and variables, str and booleans. (In Spanish).\ntype function official documentation.\nReal Python introduction to numbers and bool.\nA discussion about the floating point arithmethic in Python.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - 3 - Types</span>"
    ]
  },
  {
    "objectID": "python_types.html#types",
    "href": "python_types.html#types",
    "title": "4  Python Code - 3 - Types",
    "section": "4.2 Types",
    "text": "4.2 Types\nIn a computer language variables have types. For instance, we have already used numbers and text strings.\n\n\n\n\n\n\n\nWe can ask for the type of variable (or object).\n\n\n\n\n\n\nThe type for the number 42 is int and for the text string “My favorite number is” is str. In most computer languages text is called string, or something similar, because, for the computer, a text is a string of characters.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - 3 - Types</span>"
    ]
  },
  {
    "objectID": "python_types.html#number-types-int-and-float",
    "href": "python_types.html#number-types-int-and-float",
    "title": "4  Python Code - 3 - Types",
    "section": "4.3 Number types: int and float",
    "text": "4.3 Number types: int and float\nIn the previous example the type for the number was int (integer), but, in Python, and most other languages, we have another very important numeric type: float (floating point number).\n\n\n\n\n\n\nThe main practical difference between the integer and float types is that the arithmetic for integers will be exact, but for float will be only approximate. This is not a Python quirk, but a general feature of the computers.\n\n\n\n\n\n\nAnother practical limitation, besides the inherent error due to the approximation, of the floating point arithmetic is that you have to be careful when you compare floats.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - 3 - Types</span>"
    ]
  },
  {
    "objectID": "python_types.html#other-types-bool-and-none",
    "href": "python_types.html#other-types-bool-and-none",
    "title": "4  Python Code - 3 - Types",
    "section": "4.4 Other types: bool and None",
    "text": "4.4 Other types: bool and None\nbool (boolean) is a special type that can only have two values: True or False.\n\n\n\n\n\n\nAnother special type that you will find quite often in Python code is None. This type can only have one value: None. It is usally employed when you want to have a variable that still has no value, it signifies that it is empty.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - 3 - Types</span>"
    ]
  },
  {
    "objectID": "python_types.html#python-is-dynamic",
    "href": "python_types.html#python-is-dynamic",
    "title": "4  Python Code - 3 - Types",
    "section": "4.5 Python is dynamic",
    "text": "4.5 Python is dynamic\nIn Python we don’t need to specify the type of a variable before using it, and we can even change the type of object that the variable refers to. That is not the case in other languages, like C or Rust. In those static languages the compiler needs to know the type of the variable beforehand, and the type of a variable can not be changed.\n\n\n\n\n\n\n\nModern Python has the option of specifying the types. This is not a requirement, but you will see some type hints in Python code.\n\n\n\n\n\n\nBe careful because Python does not enforce those type hints. If you wanted to use them for anything else than documentation you would need a type checker like mypy. But if you are starting in programming, just forget about this, the idea to remember is that the objects refered to by the variables have types.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - 3 - Types</span>"
    ]
  },
  {
    "objectID": "python_types.html#type-casting",
    "href": "python_types.html#type-casting",
    "title": "4  Python Code - 3 - Types",
    "section": "4.6 Type casting",
    "text": "4.6 Type casting\nType casting or type conversion is the action of changing one type into another. Python has functions to do this type casting.\n\n\n\n\n\n\nWe can also type cast to boolean.\n\n\n\n\n\n\nFind out which int and str values will be True and False when converted to boolean.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nTry with different int and str values, like 0, 1, 2, 3, “Hello”, ” “,”“.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry to convert a boolean to integer.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - 3 - Types</span>"
    ]
  },
  {
    "objectID": "python_types.html#why-do-we-need-types",
    "href": "python_types.html#why-do-we-need-types",
    "title": "4  Python Code - 3 - Types",
    "section": "4.7 Why do we need types?",
    "text": "4.7 Why do we need types?\nFor a programming language using types is unavoidable. Different languages have different types, but they all have types. Why? Because, internally, the only thing that a computer can really stores in memory is a binary number, and the same binary number can be interpreted as different objects depending on its type.\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        0b110100\n    end\n    int[\"as int: 52\"]\n    0b110100 --&gt; int\n    float[\"as float: 7.3e-44\"]\n    0b110100 --&gt; float\n    str[\"as str: '4'\"]\n    0b110100 --&gt; str",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - 3 - Types</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "25  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "chapters_python/python_hello_world.html",
    "href": "chapters_python/python_hello_world.html",
    "title": "2  Python Code - 1 - Hello World",
    "section": "",
    "text": "2.1 Objectives\nThe aim of this exercise is to learn how to write and execute Python code.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - 1 - Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/python_hello_world.html#rationale",
    "href": "chapters_python/python_hello_world.html#rationale",
    "title": "2  Python Code - 1 - Hello World",
    "section": "2.2 Rationale",
    "text": "2.2 Rationale\nThere are plenty of programing languages, but all of them share some common principles. Computers execute machine code, a binary set of instructions that are carried out by the computer processors, but usually human do not write binary machine code, or even assembly language, the written code directly translatable to machine code.\nMost of the time programers write code in languages that are easier to write and read by us, humans. These codes, in turn, have to be translated to machine code. This process of translation is called compilation. Compilation is a complex process that comprises several steps, and different compilers and programming languages divide theses steps differently. There are compilers, like the C or C++ compiles, that take the code and compile it into a binary executable that can be directly run in a computer, while there are other, like the Python interpreter of the Java compiler, that are capable of running directly the human readable code that create an intermediate representation called bytecode. In these cases we need to install the language interpreter to run the program. For instance, if you want to run a Java or Python program you will need to install Java or Python before.\nPython is an interpreted language, so, once you install Python you will be able to directly run Python code. However, you first need to have Python available in your computer.\nThere are many ways of installing Python like:\n\nDownloading Python from python.org.\nUsing the Windows store or the Linux packages already prepared.\nUsing a Python version manager like uv.\nHaving Python included in your web browser thanks to Pyodide.\n\nIn this exercise we are going to use Pyodide, a Python version that allow us to run Python code directly in a web page without requiring any previous installation.\nThe Notebook document is composed by cells, some are text (in markdown format), and others contain Python code that can be executed. To execute a Python cell:\n\nSelect the cell that you want to execute.\nClick the play symbol on top of the page or press shift + enter.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - 1 - Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/python_hello_world.html#print-hello-world",
    "href": "chapters_python/python_hello_world.html#print-hello-world",
    "title": "2  Python Code - 1 - Hello World",
    "section": "2.3 Print Hello world",
    "text": "2.3 Print Hello world",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - 1 - Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/python_hello_world.html#print-hello-your-name",
    "href": "chapters_python/python_hello_world.html#print-hello-your-name",
    "title": "2  Python Code - 1 - Hello World",
    "section": "2.4 Print Hello “Your Name”",
    "text": "2.4 Print Hello “Your Name”\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint('Jane')",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - 1 - Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/hello_world.html",
    "href": "chapters_python/hello_world.html",
    "title": "2  Python Code - Hello World",
    "section": "",
    "text": "2.1 Objectives\nThe aim of this exercise is to learn how to write and execute Python code.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/hello_world.html#rationale",
    "href": "chapters_python/hello_world.html#rationale",
    "title": "2  Python Code - Hello World",
    "section": "2.2 Rationale",
    "text": "2.2 Rationale\nThere are plenty of programing languages, but all of them share some common principles. Computers execute machine code, a binary set of instructions that are carried out by the computer processors, but usually human do not write binary machine code, or even assembly language, the written code directly translatable to machine code.\nMost of the time programers write code in languages that are easier to write and read by us, humans. These codes, in turn, have to be translated to machine code. This process of translation is called compilation. Compilation is a complex process that comprises several steps, and different compilers and programming languages divide theses steps differently. There are compilers, like the C or C++ compiles, that take the code and compile it into a binary executable that can be directly run in a computer, while there are other, like the Python interpreter of the Java compiler, that are capable of running directly the human readable code that create an intermediate representation called bytecode. In these cases we need to install the language interpreter to run the program. For instance, if you want to run a Java or Python program you will need to install Java or Python before.\nPython is an interpreted language, so, once you install Python you will be able to directly run Python code. However, you first need to have Python available in your computer.\nThere are many ways of installing Python like:\n\nDownloading Python from python.org.\nUsing the Windows store or the Linux packages already prepared.\nUsing a Python version manager like uv.\nHaving Python included in your web browser thanks to Pyodide.\n\nIn this exercise we are going to use Pyodide, a Python version that allow us to run Python code directly in a web page without requiring any previous installation.\nThe Notebook document is composed by cells, some are text (in markdown format), and others contain Python code that can be executed. To execute a Python cell:\n\nSelect the cell that you want to execute.\nClick the play symbol on top of the page or press shift + enter.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/hello_world.html#print-hello-world",
    "href": "chapters_python/hello_world.html#print-hello-world",
    "title": "2  Python Code - Hello World",
    "section": "2.3 Print Hello world",
    "text": "2.3 Print Hello world",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/hello_world.html#print-hello-your-name",
    "href": "chapters_python/hello_world.html#print-hello-your-name",
    "title": "2  Python Code - Hello World",
    "section": "2.4 Print Hello “Your Name”",
    "text": "2.4 Print Hello “Your Name”\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint('Jane')",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Python Code - Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/flow_variables.html",
    "href": "chapters_python/flow_variables.html",
    "title": "3  Python Code - Flow and Variables",
    "section": "",
    "text": "3.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/flow_variables.html#resources",
    "href": "chapters_python/flow_variables.html#resources",
    "title": "3  Python Code - Flow and Variables",
    "section": "",
    "text": "Variables in Python in Real Python.\nprint function official documentation.\nA print function tutorial in Real Python.\nVariable unpaking tutorial in Real Python.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/flow_variables.html#flow",
    "href": "chapters_python/flow_variables.html#flow",
    "title": "3  Python Code - Flow and Variables",
    "section": "3.2 Flow",
    "text": "3.2 Flow\nThe computer executes the programming code one line (or statement) at a time. The order in which the lines are executed is called flow.\n\n\n\n\n\n\nOrder the lines in the following code, we want the computer to first say Hello, then Your Name, and, finally, an invitation to play.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that the lines are executed in order, so change the order of the lines.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"Hello\")\nprint(\"John\")\nprint(\"Do you want to play a nice game of chess?\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/flow_variables.html#variables",
    "href": "chapters_python/flow_variables.html#variables",
    "title": "3  Python Code - Flow and Variables",
    "section": "3.3 Variables",
    "text": "3.3 Variables\nWhen we run programs we store information in the memory of the computer for later use. This is a fundamental idea in computers. You can think about the memory of a computer as a file cabinet in which we can store values like numbers and strings of letters. Internally the memory is divided in small pieces, like the drawers of a filing cabinet, and the computer assings a numeric adress to each of those drawers. So, for instance, we could tell the computer to store the number 42 in the address 00000100, but it would be very cumbersome to use these numeric addresses, so, instead, the we use variables, names that we create, to refer to the memory locations and contents.\nIn different programming languages a variable can refer to the value stored or to the memory address (pointer). In Python a variable will always be a reference to the object stored. You can think of it as a label in the file cabinet drawer or an arrow that points to the drawer.\nIn Python we store a variable in memory by using the assigment operator =.\n\n\n\n\n\n\nPython is doing quite a lot of things for us when we write “favorite_number = 42”:\n\nIt reserves a space in the memory to be able to store the object that is going to create.\nIt creates the object 42.\nIt assigns the favorite_number variable as a reference to the created and stored object.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/flow_variables.html#create-and-print-variables",
    "href": "chapters_python/flow_variables.html#create-and-print-variables",
    "title": "3  Python Code - Flow and Variables",
    "section": "3.4 Create and print variables",
    "text": "3.4 Create and print variables\nCreate two variables, one with your name, and another one with your surname and print them.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite the name and year of release of any movie using two variables.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/flow_variables.html#change-the-value-of-a-variable",
    "href": "chapters_python/flow_variables.html#change-the-value-of-a-variable",
    "title": "3  Python Code - Flow and Variables",
    "section": "3.5 Change the value of a variable",
    "text": "3.5 Change the value of a variable\nThe variables can be changed to refer to different values/objects. Fix the program to show your real name by changing the value of the variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the following code, think about the expected output, what will the program print when you execute it?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/flow_variables.html#variables-are-not-text-strings",
    "href": "chapters_python/flow_variables.html#variables-are-not-text-strings",
    "title": "3  Python Code - Flow and Variables",
    "section": "3.6 Variables are not text strings",
    "text": "3.6 Variables are not text strings\nFix the following code to print the correct name of your Pokemons.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that variable names are not enclosed by quotes and that if you put something inside a quote Python will consider it a text string.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is very important to understand the difference between variables and text:\n\nvariable names are not enclosed by quotes.\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/flow_variables.html#assignment-unpaking",
    "href": "chapters_python/flow_variables.html#assignment-unpaking",
    "title": "3  Python Code - Flow and Variables",
    "section": "3.7 Assignment unpaking",
    "text": "3.7 Assignment unpaking\nPython allows for several variables to be set at the same time.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Code - Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/types.html",
    "href": "chapters_python/types.html",
    "title": "4  Python Code - 3 - Types",
    "section": "",
    "text": "4.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/types.html#resources",
    "href": "chapters_python/types.html#resources",
    "title": "4  Python Code - 3 - Types",
    "section": "",
    "text": "Real Python tutorial: basic data types\nOfficial documentation: types and operations.\nBasic introduction to type and variables, str and booleans. (In Spanish).\ntype function official documentation.\nReal Python introduction to numbers and bool.\nA discussion about the floating point arithmethic in Python.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/types.html#types",
    "href": "chapters_python/types.html#types",
    "title": "4  Python Code - 3 - Types",
    "section": "4.2 Types",
    "text": "4.2 Types\nIn a computer language variables have types. For instance, we have already used numbers and text strings.\n\n\n\n\n\n\n\nWe can ask for the type of variable (or object).\n\n\n\n\n\n\nThe type for the number 42 is int and for the text string “My favorite number is” is str. In most computer languages text is called string, or something similar, because, for the computer, a text is a string of characters.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/types.html#number-types-int-and-float",
    "href": "chapters_python/types.html#number-types-int-and-float",
    "title": "4  Python Code - 3 - Types",
    "section": "4.3 Number types: int and float",
    "text": "4.3 Number types: int and float\nIn the previous example the type for the number was int (integer), but, in Python, and most other languages, we have another very important numeric type: float (floating point number).\n\n\n\n\n\n\nThe main practical difference between the integer and float types is that the arithmetic for integers will be exact, but for float will be only approximate. This is not a Python quirk, but a general feature of the computers.\n\n\n\n\n\n\nAnother practical limitation, besides the inherent error due to the approximation, of the floating point arithmetic is that you have to be careful when you compare floats.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/types.html#other-types-bool-and-none",
    "href": "chapters_python/types.html#other-types-bool-and-none",
    "title": "4  Python Code - 3 - Types",
    "section": "4.4 Other types: bool and None",
    "text": "4.4 Other types: bool and None\nbool (boolean) is a special type that can only have two values: True or False.\n\n\n\n\n\n\nAnother special type that you will find quite often in Python code is None. This type can only have one value: None. It is usally employed when you want to have a variable that still has no value, it signifies that it is empty.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/types.html#python-is-dynamic",
    "href": "chapters_python/types.html#python-is-dynamic",
    "title": "4  Python Code - 3 - Types",
    "section": "4.5 Python is dynamic",
    "text": "4.5 Python is dynamic\nIn Python we don’t need to specify the type of a variable before using it, and we can even change the type of object that the variable refers to. That is not the case in other languages, like C or Rust. In those static languages the compiler needs to know the type of the variable beforehand, and the type of a variable can not be changed.\n\n\n\n\n\n\n\nModern Python has the option of specifying the types. This is not a requirement, but you will see some type hints in Python code.\n\n\n\n\n\n\nBe careful because Python does not enforce those type hints. If you wanted to use them for anything else than documentation you would need a type checker like mypy. But if you are starting in programming, just forget about this, the idea to remember is that the objects refered to by the variables have types.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/types.html#type-casting",
    "href": "chapters_python/types.html#type-casting",
    "title": "4  Python Code - 3 - Types",
    "section": "4.6 Type casting",
    "text": "4.6 Type casting\nType casting or type conversion is the action of changing one type into another. Python has functions to do this type casting.\n\n\n\n\n\n\nWe can also type cast to boolean.\n\n\n\n\n\n\nFind out which int and str values will be True and False when converted to boolean.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nTry with different int and str values, like 0, 1, 2, 3, “Hello”, ” “,”“.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry to convert a boolean to integer.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/types.html#why-do-we-need-types",
    "href": "chapters_python/types.html#why-do-we-need-types",
    "title": "4  Python Code - 3 - Types",
    "section": "4.7 Why do we need types?",
    "text": "4.7 Why do we need types?\nFor a programming language using types is unavoidable. Different languages have different types, but they all have types. Why? Because, internally, the only thing that a computer can really stores in memory is a binary number, and the same binary number can be interpreted as different objects depending on its type.\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        0b110100\n    end\n    int[\"as int: 52\"]\n    0b110100 --&gt; int\n    float[\"as float: 7.3e-44\"]\n    0b110100 --&gt; float\n    str[\"as str: '4'\"]\n    0b110100 --&gt; str",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Python Code - Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/operators.html",
    "href": "chapters_python/operators.html",
    "title": "5  Python Code - Operators",
    "section": "",
    "text": "5.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Code - Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/operators.html#resources",
    "href": "chapters_python/operators.html#resources",
    "title": "5  Python Code - Operators",
    "section": "",
    "text": "Real python tutorial on operators and statements.\nOfficial documentation for expressions and operators.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Code - Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/operators.html#basic-numeric-operations",
    "href": "chapters_python/operators.html#basic-numeric-operations",
    "title": "5  Python Code - Operators",
    "section": "5.2 Basic numeric operations",
    "text": "5.2 Basic numeric operations\nFor instance, in Python we can sum to numbers using the + operator.\n\n\n\n\n\n\nWith integers and floats we can use the basic arithmetic operators: +, -, /, *, .\n\n\n\n\n\n\nThere is also an operator for power: **.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a program that calculates the area of a circle.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Code - Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/operators.html#integer-division",
    "href": "chapters_python/operators.html#integer-division",
    "title": "5  Python Code - Operators",
    "section": "5.3 Integer division",
    "text": "5.3 Integer division\nFor integers Python defines two other special operators: integer division (//), and remainder (%).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"9 % 3 \", 9 % 3)\nprint(\"14 % 2 \", 14 % 2)\nprint(\"14 % 3 \", 14 % 3)\nprint(\"9 // 3 \", 9 // 3)\nprint(\"14 //2 \", 14 //2)\nprint(\"14 % 3 \", 14 % 3)\n\n\n\n\nFind out if the numbers 10938 and 9893 are divisible by 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nUse the mod operator %, and the type casting to bool.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Code - Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/operators.html#common-unary-operators",
    "href": "chapters_python/operators.html#common-unary-operators",
    "title": "5  Python Code - Operators",
    "section": "5.4 Common unary operators",
    "text": "5.4 Common unary operators\nThe operators that we have seen so far take two elements. For instance the add operator (+) takes two numbers and returns the sum of both. These operators are called binary because they take two items. But there are also unary operators; they only act over one element. The one most commonly used is the += operator.\n\n\n\n\n\n\nThere are other unary operators, like -=, *=, \\= but they are not used as much.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Python Code - Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/comparison_bool_operators.html",
    "href": "chapters_python/comparison_bool_operators.html",
    "title": "6  Python Code - Comparison and Boolean Operators",
    "section": "",
    "text": "7 Resources",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Code - Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/comparison_bool_operators.html#comparisons",
    "href": "chapters_python/comparison_bool_operators.html#comparisons",
    "title": "6  Python Code - Comparison and Boolean Operators",
    "section": "7.1 Comparisons",
    "text": "7.1 Comparisons\nA critical part of any programming language is the comparison between items. For instance, is a number equal to the result of an operation? Is is bigger or maybe smaller? Some of the operators used are:\n\nequal (==),\nless than (&lt;),\nless or equal (&lt;=),\ngreater than (&gt;),\ngreater or equal (&gt;=),\nnot equal (!=).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Code - Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/comparison_bool_operators.html#assignment-and-equality",
    "href": "chapters_python/comparison_bool_operators.html#assignment-and-equality",
    "title": "6  Python Code - Comparison and Boolean Operators",
    "section": "7.2 Assignment and equality",
    "text": "7.2 Assignment and equality\nIt is very important to understand the difference between the assingment operator (=) and the comparison operator (==). The assigment operator is used to assign a value (an object) to a variable, whereas the comparison operator is used to find out if two objects are the same or not.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that the comparison operator is ==, not =.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nname1 = “John” name2 = “John” print(a == b)\n\n\n\n\nThere is a catch with the floats. It is OK to check if they are greater or lower, but do not use the equality operator (==) to check if they are the same because the comparison might fail. Remember that floats are approximate. If you want to check if two floats are very similar you have to use the isclose function. This function is not directly avilable, you have to import it from the math module, we will work with modules in the future.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nUse the comparison operator for the integers and the isclose function for the floats.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Code - Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/comparison_bool_operators.html#none-is-none",
    "href": "chapters_python/comparison_bool_operators.html#none-is-none",
    "title": "6  Python Code - Comparison and Boolean Operators",
    "section": "7.3 None is None",
    "text": "7.3 None is None\nNone represents another special case. You might check if a variable is None using the equality operator, but is it recommended to use the is operator.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Code - Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/comparison_bool_operators.html#operations-with-booleans",
    "href": "chapters_python/comparison_bool_operators.html#operations-with-booleans",
    "title": "6  Python Code - Comparison and Boolean Operators",
    "section": "7.4 Operations with booleans",
    "text": "7.4 Operations with booleans\nThe boolean type has special operators: and, or, not. These operators define a boolean arithmetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplore the boolean arithmetic which are the results for all the combinations of and and or.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nTry all True and False combinations with and and or.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Python Code - Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html",
    "href": "chapters_python/strings.html",
    "title": "7  Python Code - 6 - Strings",
    "section": "",
    "text": "7.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html#resources",
    "href": "chapters_python/strings.html#resources",
    "title": "7  Python Code - 6 - Strings",
    "section": "",
    "text": "Official documentation for the str class.\nGoogle string tutorial, available in different languages.\nReal Python string tutorial.\nOfficial string formatting documentation.\nReal Python string formatting tutorial.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html#string-literals",
    "href": "chapters_python/strings.html#string-literals",
    "title": "7  Python Code - 6 - Strings",
    "section": "7.2 String literals",
    "text": "7.2 String literals\nIn most programming laguages the type used for text is called strings; a text is a string of characters. In Python you can create an object of type str by using a string literal, like:\n\n\n\n\n\n\nString literals can be defined with single and double quotes.\n\n\n\n\n\n\nIt is also common to use triple quotes. The advantage of the triple quotes is that they can include string literals with several lines.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html#string-methods",
    "href": "chapters_python/strings.html#string-methods",
    "title": "7  Python Code - 6 - Strings",
    "section": "7.3 String methods",
    "text": "7.3 String methods\nThe string type, through its methods, has a rich functionality available. We can, for instance create upper- or lowercase versions of the strings. This funcionality is accessed via the string class methods. It is still too early to formally introduce the concept what is a method, so lets just show some examples.\n\n\n\n\n\n\nSo, methods are used by writing a dot (.), the name of the method and two parentheses.\nYou can ask for the whole documentation of any type, class or function using the help function.\n\n\n\n\n\n\nLet’s see some examples of the most commonly used string methods.\n\n\n\n\n\n\nWe can also split a string into a list of strings.\n\n\n\n\n\n\nIf we have a list of strings we can join them.\n\n\n\n\n\n\nWe can also get every letter by using list.\n\n\n\n\n\n\nTo find out the lenght of a string we use the len function.\n\n\n\n\n\n\nCalculate the GC content, percentage of Gs and Cs of a DNA sequence.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can remove characters using replace(“character”, ““).\nYou can count the letters with the count method.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are writting some software that deal with file names, and we would like to change every .txt file into a .doc file. How could we change these file names?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have file with values separated by commas and we want them separated by tabs, how could we do it.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe tab character is represented by “ and end of line by”“.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImagine that we are reading a text file in which each line gives us information from one person. Remove the line feed and split the information items.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that you can remove the feed line and return characters using the strip method and that you can split a sting with the split method.\nOnce you have the three items you can do:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html#type-casting",
    "href": "chapters_python/strings.html#type-casting",
    "title": "7  Python Code - 6 - Strings",
    "section": "7.4 Type casting",
    "text": "7.4 Type casting\nStrings can be converted into numbers and numbers into strings.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow many digits a number has.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html#indexing",
    "href": "chapters_python/strings.html#indexing",
    "title": "7  Python Code - 6 - Strings",
    "section": "7.5 Indexing",
    "text": "7.5 Indexing\nStrings are sequences of characters and they can be indexed; we can get some of the characters, by using the square brackets: [].\n\n\n\n\n\n\n\n\n\nPython positive and negative string indexes\n\n\nWe will see that this is a general property of any sequence type in Python, all of them can be indexed in the same way.\nIndexes also allow us to ask for not just one, but several items. In the string case we will get a string with several characters. To get them we use the colon (:) to separate the first and the last position. Take into account that the first position will be included in the selection but the last one will be not.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nThe combination of the start and end position is called slice. By using this kind of indexing we are slicing the string. Slices can also be built using the slice built-in function, but this is a more avanced topic.\nSlices, besides start and stop, allow for a third number, the step, that indicates the increment between the index of the selected items. For instance, we could use the step to select every three characters.\n\n\n\n\n\n\nStep is commonly used to reverse the string by using a step of -1.\n\n\n\n\n\n\nAnother way of reversing a string, or any Python sequence, is to use the reversed function. The result won’t be exactly the same because reversed returns an iterator that has to be converted into a string. The reversed function could seem more cumbersome, but iterators have many advantages in different contexts. But we won’t discuss them here because this is a more advanced topic.\n\n\n\n\n\n\nExcercise, create a way of checking if a string is a palindrome.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou could check if the reversed string is equal to the original string.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that given a number prints its digits in reverse order and separated by spaces.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother useful string method is find. It allows us to look for ocurrences of a substring inside of a string. (Remember that we count from zero.)\n\n\n\n\n\n\nFind the position of the substring “wor” in the string “Hello world”, and then use that position to extract the “world” substring from “Hello world”\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html#operations-with-text-strings",
    "href": "chapters_python/strings.html#operations-with-text-strings",
    "title": "7  Python Code - 6 - Strings",
    "section": "7.6 Operations with text strings",
    "text": "7.6 Operations with text strings\nText strings can be added.\n\n\n\n\n\n\nOne confusing Python behaviour is that it will add two string even if there is no + sign between them. This is called string concatenation.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nThe multiplication operation is also defined for str and int. It just repeats the string the given number of times.\n\n\n\n\n\n\nWrite a program that given a number n returns the value of the operation: n + nn + nnn\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can transform, type cast, numbers into strings and string into numbers with the functions: int and str.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe could check if a string is included in another string by using the in operator.\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that variables name can not have spaces.\nThe method capitalize creates a string with the first letter in uppercase.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can create a string from a number by using the str function.\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html#f-strings",
    "href": "chapters_python/strings.html#f-strings",
    "title": "7  Python Code - 6 - Strings",
    "section": "7.7 f-strings",
    "text": "7.7 f-strings\nf-strings are a very common and powerful way of creating strings. You will see them a lot in Python code. They allow, for instance to create a string from a variable in a very suscint way: using curly braces ({}).\n\n\n\n\n\n\nf-strings have a very powerfull formatting language that allows to specify how the strings should be created.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/strings.html#utf-and-the-enconding-tables",
    "href": "chapters_python/strings.html#utf-and-the-enconding-tables",
    "title": "7  Python Code - 6 - Strings",
    "section": "7.8 UTF and the enconding tables",
    "text": "7.8 UTF and the enconding tables\nPython strings a UTF-8 strings. String encoding is a more advanced topic, but any seasoned programmer will end up having to understand a little bit about character encoding standards.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Code - Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html",
    "href": "chapters_python/lists.html",
    "title": "8  Python Code - Lists",
    "section": "",
    "text": "8.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#resources",
    "href": "chapters_python/lists.html#resources",
    "title": "8  Python Code - Lists",
    "section": "",
    "text": "Lists and tuples in the official documentation, and more on lists.\nA Real Python introduction to lists.\nlists on the Python google course (available in different languages).",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#lists",
    "href": "chapters_python/lists.html#lists",
    "title": "8  Python Code - Lists",
    "section": "8.2 Lists",
    "text": "8.2 Lists\nSo far we have seen basic, or scalar, types like: int, float, str, bool and None. List is a compound type, a type capable of holding different items.\n\n\n\n\n\n\nLists can hold any kind of type, not just basic types, but also compound types, like another list.\n\n\n\n\n\n\nIt is quite common to use lists to represent vectors, lists of numbers, and lists of lists to represent 2d-arrays, matrices.\n\n\n\n\n\n\nLists can be heterogeneous, they can hold inside elements of different types.\n\n\n\n\n\n\nIn Python there is another type, very similar to a list, but that is limited to have all its elements of the same type, the array. Arrays are more efficient than lists, but in most cases the difference is not noticeable and lists are just fine.\n\n8.2.1 List creation with list\nAs we have seen lists can be created using square brackets ([]). But lists can also be created using the list function. This function takes any iterable and returns a list. (An iterable is an object capable of returning its members one at a time). For instance we can create a list of letters using list.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#lists-are-sequences",
    "href": "chapters_python/lists.html#lists-are-sequences",
    "title": "8  Python Code - Lists",
    "section": "8.3 Lists are sequences",
    "text": "8.3 Lists are sequences\nLists are sequences. A sequence is an object composed by items that can be accessed using indexes and that has a length, the number of items that holds. We have already seen another sequence type, the string.\n\n8.3.1 Number of items, length\n\n\n\n\n\n\n\n\n8.3.2 Indexing\nLists items can be accessed using indexes, exactly like strings were accessed.\n\n\n\n\n\n\nYou have to be careful. When the index is just one number you will get one item, but if the index is a slice you will always get a list, even if you are selecting just one item.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nCreate a list with the numbers from 0 to 9, extract the odd and even numbers, the first 5 and the last 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.3.3 sorting\nLists can be sorted using the sorted function.\n\n\n\n\n\n\nsorted does the sorting doing pairwise comparisons of the elements. For a list of numbers the result is what we could expect.\n\n\n\n\n\n\nFor for the letters, or many other kinds of objects, the result can be weird.\n\n\n\n\n\n\nThe sorted function has a parameter, key, that allows to modify the elements compared. key will be a function that takes one element and returns the element to be compared. This is a topic somewhat more advanced, but you have an excellent sorting tutorial in the official documentation.\n\n\n\n\n\n\nSort the words in alphabetical order.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nThe string split method will split the text into a list of strings.\nThe string replace method can be used to remove unwanted text.\nThe sorted function can take a key parameter to modify the items compared during the sorting procedure.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe sorted function creates a new list, the original list will be intact.\n\n\n\n\n\n\nIf you wanted to sort the original list in place you could use the sort method.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe sort method sorts the list in place and it does not return the list.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.3.4 reverse\nAs we did with strings, we can also reverse a list, or any other sequence, using the function reversed. reversed returns an iterator, so in order to have a list we need to use the list function on the reversed result.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#min-max-and-sum",
    "href": "chapters_python/lists.html#min-max-and-sum",
    "title": "8  Python Code - Lists",
    "section": "8.4 min, max and sum",
    "text": "8.4 min, max and sum\nPython has some useful functions for numeric sequences and iterators like min, max and sum.\n\n\n\n\n\n\nThere are more basic statistics functions in the statistics module of the starndard library, and if you are interested in data analysis you will have to learn about numpy, pandas, and the rest of the libraries that conform the data analysis ecosystem.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#multiple-assignment",
    "href": "chapters_python/lists.html#multiple-assignment",
    "title": "8  Python Code - Lists",
    "section": "8.5 Multiple assignment",
    "text": "8.5 Multiple assignment\nLists, and tuples, can be used to assign its values to different variables.\n\n\n\n\n\n\nThis is a feature commonly used in Python that, sometimes, is known as destructuring assignment. These assignments will fail if the number of items at both sides are different.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#list-operators",
    "href": "chapters_python/lists.html#list-operators",
    "title": "8  Python Code - Lists",
    "section": "8.6 list operators",
    "text": "8.6 list operators\n\n8.6.1 concatenate with +\nTwo lists can be concatenated into a new list by using the + operator.\n\n\n\n\n\n\n\n\n8.6.2 in operator and index method\nWe can check if an item is in a list with the in operator.\n\n\n\n\n\n\nIf you need the position of the element in the list you can use the list index method.\n\n\n\n\n\n\nIf the item is found several times in the list, you will only get the index of the first appareance.\n\n\n\n\n\n\nIf you try to locate the position of an element that is not in the list, you will get an error.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#lists-are-mutable",
    "href": "chapters_python/lists.html#lists-are-mutable",
    "title": "8  Python Code - Lists",
    "section": "8.7 Lists are mutable",
    "text": "8.7 Lists are mutable\nStrings were inmutable sequences, once you create a string, it can not be changed. You can obtain a new modified string, for instance an uppercase string, but the original string will be unmodified.\n\n\n\n\n\n\nYou might have though that the original string was lost because most of the time we were reusing the name of the variable.\n\n\n\n\n\n\nBut what is going one in this code is more subtle:\n\ndna = “atcg” creates, and stores in memory, the string “atcg” and assigns the dna varible as a reference to it.\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        actg\n        \"\"\n    end\n    subgraph variables\n        dna\n    end\n    dna --&gt; actg\n\n\n\n\n\n\n\ndna.upper() creates a new string “ATCG”\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        actg\n        ACTG\n    end\n    subgraph variables\n        dna\n    end\n    dna --&gt; actg\n\n\n\n\n\n\n\ndna = dna.upper() assings the dna variable to the new string “ATCG”\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        actg\n        ACTG\n    end\n    subgraph variables\n        dna\n    end\n    dna --&gt; ACTG\n\n\n\n\n\n\n\nThere is now no variable referencing to the original “actg” string, so even if it would still be in memory it would be inaccessible to us.\nAt some point the Python interpreter will remove the original “actg” string from memory because it is not referenced by any variable, but this is of no concern to us. (This process is known in computer science as garbage collection, and Python is a garbage collected language).\n\nLists, on the other hand, are mutable. As an example, let’s use the append method, that appends a item to the list.\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        list[G, C, A, T]\n    end\n    subgraph variables\n        dna\n        dna2\n    end\n    dna --&gt; list\n    dna2 --&gt; list\n\n\n\n\n\n\nAs you can see the variables dna and dna2 refer to the same list in memory, so when we change that list, in this case by sorting it, both variables print the same result. It is worth mentioning that the sort method, unlike the string methods or the sorted function, does not return a new list.\n\n8.7.1 append and extend\nThe append method adds an element to the list.\n\n\n\n\n\n\nThe extend method adds any number of elements to the list, it takes any iterable.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nWhat would happend if you try to append a list of numbers? Try it, and explain the result.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nappend adds one item to the list and, in this case, this element happens to be the list [4, 5, 42], so no problem, we end up with a list that has this element in it.\n\n\n\n\n\n\n8.7.2 Modify the list using indexes\nLists can also be changed by using the indexing syntax.\n\n\n\n\n\n\nPredict the result of running the following code and think about why the two methods yield different results.\n\n\n\n\n\n\n\n\n8.7.3 tuples\nIn Python there is another type, very similar to a list, but inmutable, the tuple. We create tuples using parentheses instead of square brackets.\n\n\n\n\n\n\nIf you try to modify a tuple, you will get an error.\n\n\n\n\n\n\nPython tuples have a gotcha. They are created using parentheses, but if you want to create a tuple with just one element you need to include a trailing comma.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#empty-lists-or-tuples-are-false",
    "href": "chapters_python/lists.html#empty-lists-or-tuples-are-false",
    "title": "8  Python Code - Lists",
    "section": "8.8 Empty lists or tuples are false",
    "text": "8.8 Empty lists or tuples are false\nCreate an empty list and an empty tuple and trasnform it into a boolean (type cast it into a boolean). Create also a list and a tuple with one element and type cast it to boolean.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can transform to boolean using the bool function.\nYou won’t be able to create an empty tuple using the following syntax:\n\nt = ()\n\nBut you can use the tuple function.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#more-methods-help",
    "href": "chapters_python/lists.html#more-methods-help",
    "title": "8  Python Code - Lists",
    "section": "8.9 More methods, help",
    "text": "8.9 More methods, help\nThe functionallity offered by the list and tuple types is very rich, if you want to explore it in more detail remember the official documentation and the help function.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/lists.html#more-exercises",
    "href": "chapters_python/lists.html#more-exercises",
    "title": "8  Python Code - Lists",
    "section": "8.10 More exercises",
    "text": "8.10 More exercises\nSplit the items separated by commas into a into a list and transform each item in a number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe want to store the name, surname and grades of a student into three variables, and we want to calculate the mean grade.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCarry out the following manipulations.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Python Code - Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/dictionaries.html",
    "href": "chapters_python/dictionaries.html",
    "title": "9  Python Code - Dictionaries",
    "section": "",
    "text": "9.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Python Code - Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/dictionaries.html#resources",
    "href": "chapters_python/dictionaries.html#resources",
    "title": "9  Python Code - Dictionaries",
    "section": "",
    "text": "A Real Python introduction to dictionaries.\nRead about dictionaries, and more on dictionaries, in the official documentation.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Python Code - Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/dictionaries.html#creation",
    "href": "chapters_python/dictionaries.html#creation",
    "title": "9  Python Code - Dictionaries",
    "section": "9.2 Creation",
    "text": "9.2 Creation\nDictionaries, like lists, are compound types, they can hold several items. Lists are sequences, the elements that they hold are stored one after another, and we can access their items by their index, their position in the sequence.\nDictionaries also hold different values, but they are not ordered and, thus, we do not refer to them by their index. They are mappings, they assing a key to every value, and we use those keys to access to the values. In other languages these kind of objects are called hash tables, hash maps or associative arrays.\nAn example of a list:\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph values\n    John\n    Ringo\n    Paul\n    George\n    end\n    subgraph indexes\n    0\n    1\n    2\n    3\n    end\n    0 --&gt; John\n    1 --&gt; Ringo\n    2 --&gt; Paul\n    3 --&gt; George\n\n\n\n\n\n\nA dictionary:\n\n\n\n\n\nflowchart LR\n    subgraph values\n    Ringo\n    Starr\n    drums\n    end\n    subgraph keys\n    name\n    surname\n    instrument\n    end\n    name --&gt; Ringo\n    surname --&gt; Starr\n    instrument --&gt; drums\n\n\n\n\n\n\n\n\n\n\n\n\nWe create a dictionary using curly braces ({}), and we write the key and the value separated by a colon (:): {key1: value1, key2: value2}. In the previous example the keys were: “name”, “surname”, and “instrument”, and the values were: “Ringo”, “Starr”, and “drums”. As you have seen in the previous example, we can get the values stored in a dictionary by using square brackes: some_dictionary[key].\nWe can ask Python to give us the all keys and values of a dictionary.\n\n\n\n\n\n\nBe aware that the methods keys and values return iterators, so to print lists we have to pass those iterators to the list function.\nGiven the following dictionary, find out which is the minimum age of a student.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that you can use the min function to get the minimum value of a list or of an iterator.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also iterate through tuples of keys and values using the items method.\n\n\n\n\n\n\nIf we want to know how many items is the dictionary holding we use the len function.\n\n\n\n\n\n\nWe have two lists, one with values and another one with keys, create a dictionary using them.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively this could be done using the zip function.\n\n\n\n\n\n\n\n\n\n\nCreate a dictionary that holds the complementary DNA nucleotides and use it to create a reverse and complementary DNA sequence.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Python Code - Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/dictionaries.html#dicts-and-lists-can-hold-other-compound-objets",
    "href": "chapters_python/dictionaries.html#dicts-and-lists-can-hold-other-compound-objets",
    "title": "9  Python Code - Dictionaries",
    "section": "9.3 Dicts and lists can hold other compound objets",
    "text": "9.3 Dicts and lists can hold other compound objets\nPrint the name and age of these two students.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange the name of the gene2 from BRCA to BRCA2:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Python Code - Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/dictionaries.html#dicts-are-mutable",
    "href": "chapters_python/dictionaries.html#dicts-are-mutable",
    "title": "9  Python Code - Dictionaries",
    "section": "9.4 dicts are mutable",
    "text": "9.4 dicts are mutable\nDictionaries, like lists, are mutable, we can add, modify or remove, items after their creation. For instance, we can create an empty dictionary and fill it with values later.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Python Code - Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/dictionaries.html#dict-keys-are-unique",
    "href": "chapters_python/dictionaries.html#dict-keys-are-unique",
    "title": "9  Python Code - Dictionaries",
    "section": "9.5 dict keys are unique",
    "text": "9.5 dict keys are unique\nOne very important aspect of a dictionary is that keys are unique. If we try to store two values under the same key, only one will remain.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Python Code - Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/dictionaries.html#key-in-dict",
    "href": "chapters_python/dictionaries.html#key-in-dict",
    "title": "9  Python Code - Dictionaries",
    "section": "9.6 key in dict",
    "text": "9.6 key in dict\nWe can check if a key is stored in a dictionary by using the in operator.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Python Code - Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/if.html",
    "href": "chapters_python/if.html",
    "title": "10  Python Code - If",
    "section": "",
    "text": "10.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python Code - If</span>"
    ]
  },
  {
    "objectID": "chapters_python/if.html#resources",
    "href": "chapters_python/if.html#resources",
    "title": "10  Python Code - If",
    "section": "",
    "text": "Conditional statements in Real Python.\nif statement in the official documentation.\nControl flow in wikipedia.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python Code - If</span>"
    ]
  },
  {
    "objectID": "chapters_python/if.html#if",
    "href": "chapters_python/if.html#if",
    "title": "10  Python Code - If",
    "section": "10.2 if",
    "text": "10.2 if\nif is one of the basic control flow statements. It allows us to execute some code only if a given condition is met.\n\n\n\n\n\n\nIf the condition is not met the code inside the if block won’t be executed.\n\n\n\n\n\n\nEvery line included in the block will be executed, not just the first one.\n\n\n\n\n\n\nFix the following code to print “Done!” even when the condition is not met.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that a block ends when the indentation returns to the previous level.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python Code - If</span>"
    ]
  },
  {
    "objectID": "chapters_python/if.html#else",
    "href": "chapters_python/if.html#else",
    "title": "10  Python Code - If",
    "section": "10.3 else",
    "text": "10.3 else\nIt is common that we want to execute some code when the condition is met, and some other code when the condition is not met, for that we use else.\n\n\n\n\n\n\n\n\n\n\n\n\nFix this code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite some code capable of, given a pair of numbers, finding out which is the highest.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code to prevent the error when a = 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python Code - If</span>"
    ]
  },
  {
    "objectID": "chapters_python/if.html#elif",
    "href": "chapters_python/if.html#elif",
    "title": "10  Python Code - If",
    "section": "10.4 elif",
    "text": "10.4 elif\nelif allows us to test for different conditions sequentialy.\n\n\n\n\n\n\nWhen several conditions are met only the first True one will be executed.\n\n\n\n\n\n\nIn Python, a more powerful alternative to elif is the match statement.\nWrite a program that classifies a person into: baby, child, teenager, young, and old\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that writes the quote of the selected philosopher.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python Code - If</span>"
    ]
  },
  {
    "objectID": "chapters_python/if.html#boolean-casting",
    "href": "chapters_python/if.html#boolean-casting",
    "title": "10  Python Code - If",
    "section": "10.5 Boolean casting",
    "text": "10.5 Boolean casting\nWhen a condition is evaluated, internally the if statement casts anything given to a boolean. So, you will usually see expressions like:\n\n\n\n\n\n\nIt would be very weird to write:\n\n\n\n\n\n\nRemember that everything that we talked about booleans and boolean arithmetic is applicable to the if evaluation.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python Code - If</span>"
    ]
  },
  {
    "objectID": "chapters_python/for.html",
    "href": "chapters_python/for.html",
    "title": "11  Python Code - For",
    "section": "",
    "text": "11.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Python Code - For</span>"
    ]
  },
  {
    "objectID": "chapters_python/for.html#resources",
    "href": "chapters_python/for.html#resources",
    "title": "11  Python Code - For",
    "section": "",
    "text": "for statement in the official documentation.\nfor loops in Real Python.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Python Code - For</span>"
    ]
  },
  {
    "objectID": "chapters_python/for.html#for",
    "href": "chapters_python/for.html#for",
    "title": "11  Python Code - For",
    "section": "11.2 for",
    "text": "11.2 for\nfor allows us to execute a block of code for each item. The variable defined after the for keyword will take the value of each item, one at a time, one for each iteration.\n\n\n\n\n\n\nWhat would happen if we executed the following code? How would you fix it?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternally the for loop works by calling the next on an iterator from the given iterable. An iterator is an object that, when given to the next function, supports the generation of one item at a time, until it runs out of items. So the previous for loop would be, more or less, equivalent running the following code.\n\n\n\n\n\n\nPython has another way of doing loops, the while statement.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Python Code - For</span>"
    ]
  },
  {
    "objectID": "chapters_python/for.html#break",
    "href": "chapters_python/for.html#break",
    "title": "11  Python Code - For",
    "section": "11.3 break",
    "text": "11.3 break\nAt any iteration the loop could be completely stopped, broken, by using the break statement.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Python Code - For</span>"
    ]
  },
  {
    "objectID": "chapters_python/for.html#continue",
    "href": "chapters_python/for.html#continue",
    "title": "11  Python Code - For",
    "section": "11.4 continue",
    "text": "11.4 continue\nThe continue statement allows us to move to the next iteration without running the rest of the code in the block.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Python Code - For</span>"
    ]
  },
  {
    "objectID": "chapters_python/for.html#range",
    "href": "chapters_python/for.html#range",
    "title": "11  Python Code - For",
    "section": "11.5 range",
    "text": "11.5 range\nThis kind of for loop, the one implemented in Python, in other languages is known as a foreach loop. To have the functionallity available in other programming languages, in which the for statement just iterates over some numbers, you could combine a for loop with the range function.\nWrite a for loop that prints the first 10 natural numbers.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can use a list or the range function.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nWith a list.\n\n\n\n\n\n\nWith the range function.\n\n\n\n\n\n\n\n\n\n\nCreate a program that writes the following:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThere are many ways of solving this exercise, here you have some.\n\n\n\n\n\n\n\n\n\n\n\n\nUsing map and range.\n\n\n\n\n\n\nUsing a list comprenhension.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Python Code - For</span>"
    ]
  },
  {
    "objectID": "chapters_python/for.html#enumerate",
    "href": "chapters_python/for.html#enumerate",
    "title": "11  Python Code - For",
    "section": "11.6 enumerate",
    "text": "11.6 enumerate\nIt is quite common to require both the item and its index. We could do it like:\n\n\n\n\n\n\nHowever, this pattern is so common that Python have solved it using the function enumerate.\n\n\n\n\n\n\nEnumerate works by creating an iterator of tuples with two elements: the index, and the original item.\n\n\n\n\n\n\nAnd since Python supports mutiple assigment what we are doing in the for loop is equivalente to:",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Python Code - For</span>"
    ]
  },
  {
    "objectID": "chapters_python/code_blocks.html",
    "href": "chapters_python/code_blocks.html",
    "title": "12  Python Code - Code Blocks",
    "section": "",
    "text": "A block of code is a set of statements, functions or instructions that are grouped together. In most programming languages the blocks of code are created by using curly braces ({}). For instance, in C the statements executed when a test condition is met would be written as:\nif (testCondition) {\n   statement1;\n   statement2;\n   statement3;\n}\nIn Python a block of code is created by using indentation.\n\n\n\n\n\n\n\nIn the if and for the code starts with a colon (:)\nThe next line after the colon should be indented\nThe block ends when the indentation goes back to the previous level.\n\nThe standard is to create the indentation by using four spaces.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Python Code - Code Blocks</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/hello_world.html",
    "href": "chapters_python/1_basics/hello_world.html",
    "title": "2  Hello World",
    "section": "",
    "text": "2.1 Objectives\nThe aim of this exercise is to learn how to write and execute Python code.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/hello_world.html#rationale",
    "href": "chapters_python/1_basics/hello_world.html#rationale",
    "title": "2  Hello World",
    "section": "2.2 Rationale",
    "text": "2.2 Rationale\nThere are plenty of programing languages, but all of them share some common principles. Computers execute machine code, a binary set of instructions that are carried out by the computer processors, but usually human do not write binary machine code, or even assembly language, the written code directly translatable to machine code.\nMost of the time programers write code in languages that are easier to write and read by us, humans. These codes, in turn, have to be translated to machine code. This process of translation is called compilation. Compilation is a complex process that comprises several steps, and different compilers and programming languages divide theses steps differently. There are compilers, like the C or C++ compiles, that take the code and compile it into a binary executable that can be directly run in a computer, while there are other, like the Python interpreter of the Java compiler, that are capable of running directly the human readable code that create an intermediate representation called bytecode. In these cases we need to install the language interpreter to run the program. For instance, if you want to run a Java or Python program you will need to install Java or Python before.\nPython is an interpreted language, so, once you install Python you will be able to directly run Python code. However, you first need to have Python available in your computer.\nThere are many ways of installing Python like:\n\nDownloading Python from python.org.\nUsing the Windows store or the Linux packages already prepared.\nUsing a Python version manager like uv.\nHaving Python included in your web browser thanks to Pyodide.\n\nIn this exercise we are going to use Pyodide, a Python version that allow us to run Python code directly in a web page without requiring any previous installation.\nThe Notebook document is composed by cells, some are text (in markdown format), and others contain Python code that can be executed. To execute a Python cell:\n\nSelect the cell that you want to execute.\nClick the play symbol on top of the page or press shift + enter.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/hello_world.html#print-hello-world",
    "href": "chapters_python/1_basics/hello_world.html#print-hello-world",
    "title": "2  Hello World",
    "section": "2.3 Print Hello world",
    "text": "2.3 Print Hello world\nTypically when you learn a new language of technical tool, you start off by trying to return a ‘hello world’ message. So that is how we are going to start here with python:",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/hello_world.html#print-hello-your-name",
    "href": "chapters_python/1_basics/hello_world.html#print-hello-your-name",
    "title": "2  Hello World",
    "section": "2.4 Print Hello “Your Name”",
    "text": "2.4 Print Hello “Your Name”\nNow lets try and modify the above code and re-run it below; so instead of saying hello world, why don’t you try and type in your name - to say hello john!\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint('Hello Jane!')",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/flow_variables.html",
    "href": "chapters_python/1_basics/flow_variables.html",
    "title": "3  Flow and Variables",
    "section": "",
    "text": "3.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/flow_variables.html#resources",
    "href": "chapters_python/1_basics/flow_variables.html#resources",
    "title": "3  Flow and Variables",
    "section": "",
    "text": "Variables in Python in Real Python.\nprint function official documentation.\nA print function tutorial in Real Python.\nVariable unpaking tutorial in Real Python.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/flow_variables.html#flow",
    "href": "chapters_python/1_basics/flow_variables.html#flow",
    "title": "3  Flow and Variables",
    "section": "3.2 Flow",
    "text": "3.2 Flow\nThe computer executes the programming code one line (or statement) at a time. The order in which the lines are executed is called flow.\n\n\n\n\n\n\nOrder the lines in the following code, we want the computer to first say Hello, then Your Name, and, finally, an invitation to play.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that the lines are executed in order, so change the order of the lines.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"Hello\")\nprint(\"John\")\nprint(\"Do you want to play a nice game of chess?\")",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/flow_variables.html#variables",
    "href": "chapters_python/1_basics/flow_variables.html#variables",
    "title": "3  Flow and Variables",
    "section": "3.3 Variables",
    "text": "3.3 Variables\nWhen we run programs we store information in the memory of the computer for later use. This is a fundamental idea in computers. You can think about the memory of a computer as a file cabinet in which we can store values like numbers and strings of letters. Internally the memory is divided in small pieces, like the drawers of a filing cabinet, and the computer assings a numeric adress to each of those drawers. So, for instance, we could tell the computer to store the number 42 in the address 00000100, but it would be very cumbersome to use these numeric addresses, so, instead, the we use variables, names that we create, to refer to the memory locations and contents.\nIn different programming languages a variable can refer to the value stored or to the memory address (pointer). In Python a variable will always be a reference to the object stored. You can think of it as a label in the file cabinet drawer or an arrow that points to the drawer.\nIn Python we store a variable in memory by using the assigment operator =.\n\n\n\n\n\n\nPython is doing quite a lot of things for us when we write “favorite_number = 42”:\n\nIt reserves a space in the memory to be able to store the object that is going to create.\nIt creates the object 42.\nIt assigns the favorite_number variable as a reference to the created and stored object.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/flow_variables.html#create-and-print-variables",
    "href": "chapters_python/1_basics/flow_variables.html#create-and-print-variables",
    "title": "3  Flow and Variables",
    "section": "3.4 Create and print variables",
    "text": "3.4 Create and print variables\nCreate two variables, one with your name, and another one with your surname and print them.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite the name and year of release of any movie using two variables.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/flow_variables.html#change-the-value-of-a-variable",
    "href": "chapters_python/1_basics/flow_variables.html#change-the-value-of-a-variable",
    "title": "3  Flow and Variables",
    "section": "3.5 Change the value of a variable",
    "text": "3.5 Change the value of a variable\nThe variables can be changed to refer to different values/objects. Fix the program to show your real name by changing the value of the variable.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven the following code, think about the expected output, what will the program print when you execute it?",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/flow_variables.html#variables-are-not-text-strings",
    "href": "chapters_python/1_basics/flow_variables.html#variables-are-not-text-strings",
    "title": "3  Flow and Variables",
    "section": "3.6 Variables are not text strings",
    "text": "3.6 Variables are not text strings\nFix the following code to print the correct name of your Pokemons.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that variable names are not enclosed by quotes and that if you put something inside a quote Python will consider it a text string.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is very important to understand the difference between variables and text:\n\nvariable names are not enclosed by quotes.\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/1_basics/flow_variables.html#assignment-unpaking",
    "href": "chapters_python/1_basics/flow_variables.html#assignment-unpaking",
    "title": "3  Flow and Variables",
    "section": "3.7 Assignment unpaking",
    "text": "3.7 Assignment unpaking\nPython allows for several variables to be set at the same time.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Flow and Variables</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/types.html",
    "href": "chapters_python/2_types_operators/types.html",
    "title": "4  Types",
    "section": "",
    "text": "4.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/types.html#resources",
    "href": "chapters_python/2_types_operators/types.html#resources",
    "title": "4  Types",
    "section": "",
    "text": "Real Python tutorial: basic data types\nOfficial documentation: types and operations.\nBasic introduction to type and variables, str and booleans. (In Spanish).\ntype function official documentation.\nReal Python introduction to numbers and bool.\nA discussion about the floating point arithmethic in Python.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/types.html#types",
    "href": "chapters_python/2_types_operators/types.html#types",
    "title": "4  Types",
    "section": "4.2 Types",
    "text": "4.2 Types\nIn a computer language variables have types. For instance, we have already used numbers and text strings.\n\n\n\n\n\n\n\nWe can ask for the type of variable (or object).\n\n\n\n\n\n\nThe type for the number 42 is int and for the text string “My favorite number is” is str. In most computer languages text is called string, or something similar, because, for the computer, a text is a string of characters.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/types.html#number-types-int-and-float",
    "href": "chapters_python/2_types_operators/types.html#number-types-int-and-float",
    "title": "4  Types",
    "section": "4.3 Number types: int and float",
    "text": "4.3 Number types: int and float\nIn the previous example the type for the number was int (integer), but, in Python, and most other languages, we have another very important numeric type: float (floating point number).\n\n\n\n\n\n\nThe main practical difference between the integer and float types is that the arithmetic for integers will be exact, but for float will be only approximate. This is not a Python quirk, but a general feature of the computers.\n\n\n\n\n\n\nAnother practical limitation, besides the inherent error due to the approximation, of the floating point arithmetic is that you have to be careful when you compare floats.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/types.html#other-types-bool-and-none",
    "href": "chapters_python/2_types_operators/types.html#other-types-bool-and-none",
    "title": "4  Types",
    "section": "4.4 Other types: bool and None",
    "text": "4.4 Other types: bool and None\nbool (boolean) is a special type that can only have two values: True or False.\n\n\n\n\n\n\nAnother special type that you will find quite often in Python code is None. This type can only have one value: None. It is usally employed when you want to have a variable that still has no value, it signifies that it is empty.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/types.html#python-is-dynamic",
    "href": "chapters_python/2_types_operators/types.html#python-is-dynamic",
    "title": "4  Types",
    "section": "4.5 Python is dynamic",
    "text": "4.5 Python is dynamic\nIn Python we don’t need to specify the type of a variable before using it, and we can even change the type of object that the variable refers to. That is not the case in other languages, like C or Rust. In those static languages the compiler needs to know the type of the variable beforehand, and the type of a variable can not be changed.\n\n\n\n\n\n\n\nModern Python has the option of specifying the types. This is not a requirement, but you will see some type hints in Python code.\n\n\n\n\n\n\nBe careful because Python does not enforce those type hints. If you wanted to use them for anything else than documentation you would need a type checker like mypy. But if you are starting in programming, just forget about this, the idea to remember is that the objects refered to by the variables have types.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/types.html#type-casting",
    "href": "chapters_python/2_types_operators/types.html#type-casting",
    "title": "4  Types",
    "section": "4.6 Type casting",
    "text": "4.6 Type casting\nType casting or type conversion is the action of changing one type into another. Python has functions to do this type casting.\n\n\n\n\n\n\nWe can also type cast to boolean.\n\n\n\n\n\n\nFind out which int and str values will be True and False when converted to boolean.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nTry with different int and str values, like 0, 1, 2, 3, “Hello”, ” “,”“.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTry to convert a boolean to integer.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/types.html#why-do-we-need-types",
    "href": "chapters_python/2_types_operators/types.html#why-do-we-need-types",
    "title": "4  Types",
    "section": "4.7 Why do we need types?",
    "text": "4.7 Why do we need types?\nFor a programming language using types is unavoidable. Different languages have different types, but they all have types. Why? Because, internally, the only thing that a computer can really stores in memory is a binary number, and the same binary number can be interpreted as different objects depending on its type.\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        0b110100\n    end\n    int[\"as int: 52\"]\n    0b110100 --&gt; int\n    float[\"as float: 7.3e-44\"]\n    0b110100 --&gt; float\n    str[\"as str: '4'\"]\n    0b110100 --&gt; str",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Types</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/operators.html",
    "href": "chapters_python/2_types_operators/operators.html",
    "title": "5  Operators",
    "section": "",
    "text": "5.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/operators.html#resources",
    "href": "chapters_python/2_types_operators/operators.html#resources",
    "title": "5  Operators",
    "section": "",
    "text": "Real python tutorial on operators and statements.\nOfficial documentation for expressions and operators.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/operators.html#basic-numeric-operations",
    "href": "chapters_python/2_types_operators/operators.html#basic-numeric-operations",
    "title": "5  Operators",
    "section": "5.2 Basic numeric operations",
    "text": "5.2 Basic numeric operations\nFor instance, in Python we can sum to numbers using the + operator.\n\n\n\n\n\n\nWith integers and floats we can use the basic arithmetic operators: +, -, /, *, .\n\n\n\n\n\n\nThere is also an operator for power: **.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a program that calculates the area of a circle.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/operators.html#integer-division",
    "href": "chapters_python/2_types_operators/operators.html#integer-division",
    "title": "5  Operators",
    "section": "5.3 Integer division",
    "text": "5.3 Integer division\nFor integers Python defines two other special operators: integer division (//), and remainder (%).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nprint(\"9 % 3 \", 9 % 3)\nprint(\"14 % 2 \", 14 % 2)\nprint(\"14 % 3 \", 14 % 3)\nprint(\"9 // 3 \", 9 // 3)\nprint(\"14 //2 \", 14 //2)\nprint(\"14 % 3 \", 14 % 3)\n\n\n\n\nFind out if the numbers 10938 and 9893 are divisible by 3.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nUse the mod operator %, and the type casting to bool.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/operators.html#common-unary-operators",
    "href": "chapters_python/2_types_operators/operators.html#common-unary-operators",
    "title": "5  Operators",
    "section": "5.4 Common unary operators",
    "text": "5.4 Common unary operators\nThe operators that we have seen so far take two elements. For instance the add operator (+) takes two numbers and returns the sum of both. These operators are called binary because they take two items. But there are also unary operators; they only act over one element. The one most commonly used is the += operator.\n\n\n\n\n\n\nThere are other unary operators, like -=, *=, \\= but they are not used as much.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/comparison_bool_operators.html",
    "href": "chapters_python/2_types_operators/comparison_bool_operators.html",
    "title": "6  Comparison and Boolean Operators",
    "section": "",
    "text": "7 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/comparison_bool_operators.html#comparisons",
    "href": "chapters_python/2_types_operators/comparison_bool_operators.html#comparisons",
    "title": "6  Comparison and Boolean Operators",
    "section": "7.1 Comparisons",
    "text": "7.1 Comparisons\nA critical part of any programming language is the comparison between items. For instance, is a number equal to the result of an operation? Is is bigger or maybe smaller? Some of the operators used are:\n\nequal (==),\nless than (&lt;),\nless or equal (&lt;=),\ngreater than (&gt;),\ngreater or equal (&gt;=),\nnot equal (!=).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/comparison_bool_operators.html#assignment-and-equality",
    "href": "chapters_python/2_types_operators/comparison_bool_operators.html#assignment-and-equality",
    "title": "6  Comparison and Boolean Operators",
    "section": "7.2 Assignment and equality",
    "text": "7.2 Assignment and equality\nIt is very important to understand the difference between the assingment operator (=) and the comparison operator (==). The assigment operator is used to assign a value (an object) to a variable, whereas the comparison operator is used to find out if two objects are the same or not.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that the comparison operator is ==, not =.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nname1 = “John” name2 = “John” print(a == b)\n\n\n\n\nThere is a catch with the floats. It is OK to check if they are greater or lower, but do not use the equality operator (==) to check if they are the same because the comparison might fail. Remember that floats are approximate. If you want to check if two floats are very similar you have to use the isclose function. This function is not directly avilable, you have to import it from the math module, we will work with modules in the future.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nUse the comparison operator for the integers and the isclose function for the floats.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/comparison_bool_operators.html#none-is-none",
    "href": "chapters_python/2_types_operators/comparison_bool_operators.html#none-is-none",
    "title": "6  Comparison and Boolean Operators",
    "section": "7.3 None is None",
    "text": "7.3 None is None\nNone represents another special case. You might check if a variable is None using the equality operator, but is it recommended to use the is operator.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/comparison_bool_operators.html#operations-with-booleans",
    "href": "chapters_python/2_types_operators/comparison_bool_operators.html#operations-with-booleans",
    "title": "6  Comparison and Boolean Operators",
    "section": "7.4 Operations with booleans",
    "text": "7.4 Operations with booleans\nThe boolean type has special operators: and, or, not. These operators define a boolean arithmetic.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplore the boolean arithmetic which are the results for all the combinations of and and or.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nTry all True and False combinations with and and or.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Comparison and Boolean Operators</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html",
    "href": "chapters_python/2_types_operators/strings.html",
    "title": "7  Strings",
    "section": "",
    "text": "7.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html#resources",
    "href": "chapters_python/2_types_operators/strings.html#resources",
    "title": "7  Strings",
    "section": "",
    "text": "Official documentation for the str class.\nGoogle string tutorial, available in different languages.\nReal Python string tutorial.\nOfficial string formatting documentation.\nReal Python string formatting tutorial.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html#string-literals",
    "href": "chapters_python/2_types_operators/strings.html#string-literals",
    "title": "7  Strings",
    "section": "7.2 String literals",
    "text": "7.2 String literals\nIn most programming laguages the type used for text is called strings; a text is a string of characters. In Python you can create an object of type str by using a string literal, like:\n\n\n\n\n\n\nString literals can be defined with single and double quotes.\n\n\n\n\n\n\nIt is also common to use triple quotes. The advantage of the triple quotes is that they can include string literals with several lines.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html#string-methods",
    "href": "chapters_python/2_types_operators/strings.html#string-methods",
    "title": "7  Strings",
    "section": "7.3 String methods",
    "text": "7.3 String methods\nThe string type, through its methods, has a rich functionality available. We can, for instance create upper- or lowercase versions of the strings. This funcionality is accessed via the string class methods. It is still too early to formally introduce the concept what is a method, so lets just show some examples.\n\n\n\n\n\n\nSo, methods are used by writing a dot (.), the name of the method and two parentheses.\nYou can ask for the whole documentation of any type, class or function using the help function.\n\n\n\n\n\n\nLet’s see some examples of the most commonly used string methods.\n\n\n\n\n\n\nWe can also split a string into a list of strings.\n\n\n\n\n\n\nIf we have a list of strings we can join them.\n\n\n\n\n\n\nWe can also get every letter by using list.\n\n\n\n\n\n\nTo find out the lenght of a string we use the len function.\n\n\n\n\n\n\nCalculate the GC content, percentage of Gs and Cs of a DNA sequence.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can remove characters using replace(“character”, ““).\nYou can count the letters with the count method.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are writting some software that deal with file names, and we would like to change every .txt file into a .doc file. How could we change these file names?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe have file with values separated by commas and we want them separated by tabs, how could we do it.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe tab character is represented by “ and end of line by”“.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImagine that we are reading a text file in which each line gives us information from one person. Remove the line feed and split the information items.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that you can remove the feed line and return characters using the strip method and that you can split a sting with the split method.\nOnce you have the three items you can do:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html#type-casting",
    "href": "chapters_python/2_types_operators/strings.html#type-casting",
    "title": "7  Strings",
    "section": "7.4 Type casting",
    "text": "7.4 Type casting\nStrings can be converted into numbers and numbers into strings.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow many digits a number has.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html#indexing",
    "href": "chapters_python/2_types_operators/strings.html#indexing",
    "title": "7  Strings",
    "section": "7.5 Indexing",
    "text": "7.5 Indexing\nStrings are sequences of characters and they can be indexed; we can get some of the characters, by using the square brackets: [].\n\n\n\n\n\n\n\n\n\nPython positive and negative string indexes\n\n\nWe will see that this is a general property of any sequence type in Python, all of them can be indexed in the same way.\nIndexes also allow us to ask for not just one, but several items. In the string case we will get a string with several characters. To get them we use the colon (:) to separate the first and the last position. Take into account that the first position will be included in the selection but the last one will be not.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nThe combination of the start and end position is called slice. By using this kind of indexing we are slicing the string. Slices can also be built using the slice built-in function, but this is a more avanced topic.\nSlices, besides start and stop, allow for a third number, the step, that indicates the increment between the index of the selected items. For instance, we could use the step to select every three characters.\n\n\n\n\n\n\nStep is commonly used to reverse the string by using a step of -1.\n\n\n\n\n\n\nAnother way of reversing a string, or any Python sequence, is to use the reversed function. The result won’t be exactly the same because reversed returns an iterator that has to be converted into a string. The reversed function could seem more cumbersome, but iterators have many advantages in different contexts. But we won’t discuss them here because this is a more advanced topic.\n\n\n\n\n\n\nExcercise, create a way of checking if a string is a palindrome.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou could check if the reversed string is equal to the original string.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that given a number prints its digits in reverse order and separated by spaces.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother useful string method is find. It allows us to look for ocurrences of a substring inside of a string. (Remember that we count from zero.)\n\n\n\n\n\n\nFind the position of the substring “wor” in the string “Hello world”, and then use that position to extract the “world” substring from “Hello world”\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html#operations-with-text-strings",
    "href": "chapters_python/2_types_operators/strings.html#operations-with-text-strings",
    "title": "7  Strings",
    "section": "7.6 Operations with text strings",
    "text": "7.6 Operations with text strings\nText strings can be added.\n\n\n\n\n\n\nOne confusing Python behaviour is that it will add two string even if there is no + sign between them. This is called string concatenation.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nThe multiplication operation is also defined for str and int. It just repeats the string the given number of times.\n\n\n\n\n\n\nWrite a program that given a number n returns the value of the operation: n + nn + nnn\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can transform, type cast, numbers into strings and string into numbers with the functions: int and str.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe could check if a string is included in another string by using the in operator.\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that variables name can not have spaces.\nThe method capitalize creates a string with the first letter in uppercase.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can create a string from a number by using the str function.\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html#f-strings",
    "href": "chapters_python/2_types_operators/strings.html#f-strings",
    "title": "7  Strings",
    "section": "7.7 f-strings",
    "text": "7.7 f-strings\nf-strings are a very common and powerful way of creating strings. You will see them a lot in Python code. They allow, for instance to create a string from a variable in a very suscint way: using curly braces ({}).\n\n\n\n\n\n\nf-strings have a very powerfull formatting language that allows to specify how the strings should be created.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/2_types_operators/strings.html#utf-and-the-enconding-tables",
    "href": "chapters_python/2_types_operators/strings.html#utf-and-the-enconding-tables",
    "title": "7  Strings",
    "section": "7.8 UTF and the enconding tables",
    "text": "7.8 UTF and the enconding tables\nPython strings a UTF-8 strings. String encoding is a more advanced topic, but any seasoned programmer will end up having to understand a little bit about character encoding standards.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html",
    "href": "chapters_python/3_compound_types/lists.html",
    "title": "8  Lists",
    "section": "",
    "text": "8.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#resources",
    "href": "chapters_python/3_compound_types/lists.html#resources",
    "title": "8  Lists",
    "section": "",
    "text": "Lists and tuples in the official documentation, and more on lists.\nA Real Python introduction to lists.\nlists on the Python google course (available in different languages).",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#lists",
    "href": "chapters_python/3_compound_types/lists.html#lists",
    "title": "8  Lists",
    "section": "8.2 Lists",
    "text": "8.2 Lists\nSo far we have seen basic, or scalar, types like: int, float, str, bool and None. List is a compound type, a type capable of holding different items.\n\n\n\n\n\n\nLists can hold any kind of type, not just basic types, but also compound types, like another list.\n\n\n\n\n\n\nIt is quite common to use lists to represent vectors, lists of numbers, and lists of lists to represent 2d-arrays, matrices.\n\n\n\n\n\n\nLists can be heterogeneous, they can hold inside elements of different types.\n\n\n\n\n\n\nIn Python there is another type, very similar to a list, but that is limited to have all its elements of the same type, the array. Arrays are more efficient than lists, but in most cases the difference is not noticeable and lists are just fine.\n\n8.2.1 List creation with list\nAs we have seen lists can be created using square brackets ([]). But lists can also be created using the list function. This function takes any iterable and returns a list. (An iterable is an object capable of returning its members one at a time). For instance we can create a list of letters using list.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#lists-are-sequences",
    "href": "chapters_python/3_compound_types/lists.html#lists-are-sequences",
    "title": "8  Lists",
    "section": "8.3 Lists are sequences",
    "text": "8.3 Lists are sequences\nLists are sequences. A sequence is an object composed by items that can be accessed using indexes and that has a length, the number of items that holds. We have already seen another sequence type, the string.\n\n8.3.1 Number of items, length\n\n\n\n\n\n\n\n\n8.3.2 Indexing\nLists items can be accessed using indexes, exactly like strings were accessed.\n\n\n\n\n\n\nYou have to be careful. When the index is just one number you will get one item, but if the index is a slice you will always get a list, even if you are selecting just one item.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nCreate a list with the numbers from 0 to 9, extract the odd and even numbers, the first 5 and the last 5.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.3.3 sorting\nLists can be sorted using the sorted function.\n\n\n\n\n\n\nsorted does the sorting doing pairwise comparisons of the elements. For a list of numbers the result is what we could expect.\n\n\n\n\n\n\nFor for the letters, or many other kinds of objects, the result can be weird.\n\n\n\n\n\n\nThe sorted function has a parameter, key, that allows to modify the elements compared. key will be a function that takes one element and returns the element to be compared. This is a topic somewhat more advanced, but you have an excellent sorting tutorial in the official documentation.\n\n\n\n\n\n\nSort the words in alphabetical order.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\nThe string split method will split the text into a list of strings.\nThe string replace method can be used to remove unwanted text.\nThe sorted function can take a key parameter to modify the items compared during the sorting procedure.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe sorted function creates a new list, the original list will be intact.\n\n\n\n\n\n\nIf you wanted to sort the original list in place you could use the sort method.\n\n\n\n\n\n\nFix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe sort method sorts the list in place and it does not return the list.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.3.4 reverse\nAs we did with strings, we can also reverse a list, or any other sequence, using the function reversed. reversed returns an iterator, so in order to have a list we need to use the list function on the reversed result.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#min-max-and-sum",
    "href": "chapters_python/3_compound_types/lists.html#min-max-and-sum",
    "title": "8  Lists",
    "section": "8.4 min, max and sum",
    "text": "8.4 min, max and sum\nPython has some useful functions for numeric sequences and iterators like min, max and sum.\n\n\n\n\n\n\nThere are more basic statistics functions in the statistics module of the starndard library, and if you are interested in data analysis you will have to learn about numpy, pandas, and the rest of the libraries that conform the data analysis ecosystem.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#multiple-assignment",
    "href": "chapters_python/3_compound_types/lists.html#multiple-assignment",
    "title": "8  Lists",
    "section": "8.5 Multiple assignment",
    "text": "8.5 Multiple assignment\nLists, and tuples, can be used to assign its values to different variables.\n\n\n\n\n\n\nThis is a feature commonly used in Python that, sometimes, is known as destructuring assignment. These assignments will fail if the number of items at both sides are different.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#list-operators",
    "href": "chapters_python/3_compound_types/lists.html#list-operators",
    "title": "8  Lists",
    "section": "8.6 list operators",
    "text": "8.6 list operators\n\n8.6.1 concatenate with +\nTwo lists can be concatenated into a new list by using the + operator.\n\n\n\n\n\n\n\n\n8.6.2 in operator and index method\nWe can check if an item is in a list with the in operator.\n\n\n\n\n\n\nIf you need the position of the element in the list you can use the list index method.\n\n\n\n\n\n\nIf the item is found several times in the list, you will only get the index of the first appareance.\n\n\n\n\n\n\nIf you try to locate the position of an element that is not in the list, you will get an error.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#lists-are-mutable",
    "href": "chapters_python/3_compound_types/lists.html#lists-are-mutable",
    "title": "8  Lists",
    "section": "8.7 Lists are mutable",
    "text": "8.7 Lists are mutable\nStrings were inmutable sequences, once you create a string, it can not be changed. You can obtain a new modified string, for instance an uppercase string, but the original string will be unmodified.\n\n\n\n\n\n\nYou might have though that the original string was lost because most of the time we were reusing the name of the variable.\n\n\n\n\n\n\nBut what is going one in this code is more subtle:\n\ndna = “atcg” creates, and stores in memory, the string “atcg” and assigns the dna varible as a reference to it.\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        actg\n        \"\"\n    end\n    subgraph variables\n        dna\n    end\n    dna --&gt; actg\n\n\n\n\n\n\n\ndna.upper() creates a new string “ATCG”\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        actg\n        ACTG\n    end\n    subgraph variables\n        dna\n    end\n    dna --&gt; actg\n\n\n\n\n\n\n\ndna = dna.upper() assings the dna variable to the new string “ATCG”\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        actg\n        ACTG\n    end\n    subgraph variables\n        dna\n    end\n    dna --&gt; ACTG\n\n\n\n\n\n\n\nThere is now no variable referencing to the original “actg” string, so even if it would still be in memory it would be inaccessible to us.\nAt some point the Python interpreter will remove the original “actg” string from memory because it is not referenced by any variable, but this is of no concern to us. (This process is known in computer science as garbage collection, and Python is a garbage collected language).\n\nLists, on the other hand, are mutable. As an example, let’s use the append method, that appends a item to the list.\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph memory\n        list[G, C, A, T]\n    end\n    subgraph variables\n        dna\n        dna2\n    end\n    dna --&gt; list\n    dna2 --&gt; list\n\n\n\n\n\n\nAs you can see the variables dna and dna2 refer to the same list in memory, so when we change that list, in this case by sorting it, both variables print the same result. It is worth mentioning that the sort method, unlike the string methods or the sorted function, does not return a new list.\n\n8.7.1 append and extend\nThe append method adds an element to the list.\n\n\n\n\n\n\nThe extend method adds any number of elements to the list, it takes any iterable.\n\n\n\n\n\n\nPredict the result of running the following code:\n\n\n\n\n\n\nWhat would happend if you try to append a list of numbers? Try it, and explain the result.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nappend adds one item to the list and, in this case, this element happens to be the list [4, 5, 42], so no problem, we end up with a list that has this element in it.\n\n\n\n\n\n\n8.7.2 Modify the list using indexes\nLists can also be changed by using the indexing syntax.\n\n\n\n\n\n\nPredict the result of running the following code and think about why the two methods yield different results.\n\n\n\n\n\n\n\n\n8.7.3 tuples\nIn Python there is another type, very similar to a list, but inmutable, the tuple. We create tuples using parentheses instead of square brackets.\n\n\n\n\n\n\nIf you try to modify a tuple, you will get an error.\n\n\n\n\n\n\nPython tuples have a gotcha. They are created using parentheses, but if you want to create a tuple with just one element you need to include a trailing comma.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#empty-lists-or-tuples-are-false",
    "href": "chapters_python/3_compound_types/lists.html#empty-lists-or-tuples-are-false",
    "title": "8  Lists",
    "section": "8.8 Empty lists or tuples are false",
    "text": "8.8 Empty lists or tuples are false\nCreate an empty list and an empty tuple and trasnform it into a boolean (type cast it into a boolean). Create also a list and a tuple with one element and type cast it to boolean.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can transform to boolean using the bool function.\nYou won’t be able to create an empty tuple using the following syntax:\n\nt = ()\n\nBut you can use the tuple function.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#more-methods-help",
    "href": "chapters_python/3_compound_types/lists.html#more-methods-help",
    "title": "8  Lists",
    "section": "8.9 More methods, help",
    "text": "8.9 More methods, help\nThe functionallity offered by the list and tuple types is very rich, if you want to explore it in more detail remember the official documentation and the help function.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/lists.html#more-exercises",
    "href": "chapters_python/3_compound_types/lists.html#more-exercises",
    "title": "8  Lists",
    "section": "8.10 More exercises",
    "text": "8.10 More exercises\nSplit the items separated by commas into a into a list and transform each item in a number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe want to store the name, surname and grades of a student into three variables, and we want to calculate the mean grade.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCarry out the following manipulations.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/dictionaries.html",
    "href": "chapters_python/3_compound_types/dictionaries.html",
    "title": "9  Python Code - Dictionaries",
    "section": "",
    "text": "9.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/dictionaries.html#resources",
    "href": "chapters_python/3_compound_types/dictionaries.html#resources",
    "title": "9  Python Code - Dictionaries",
    "section": "",
    "text": "A Real Python introduction to dictionaries.\nRead about dictionaries, and more on dictionaries, in the official documentation.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/dictionaries.html#creation",
    "href": "chapters_python/3_compound_types/dictionaries.html#creation",
    "title": "9  Python Code - Dictionaries",
    "section": "9.2 Creation",
    "text": "9.2 Creation\nDictionaries, like lists, are compound types, they can hold several items. Lists are sequences, the elements that they hold are stored one after another, and we can access their items by their index, their position in the sequence.\nDictionaries also hold different values, but they are not ordered and, thus, we do not refer to them by their index. They are mappings, they assing a key to every value, and we use those keys to access to the values. In other languages these kind of objects are called hash tables, hash maps or associative arrays.\nAn example of a list:\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph values\n    John\n    Ringo\n    Paul\n    George\n    end\n    subgraph indexes\n    0\n    1\n    2\n    3\n    end\n    0 --&gt; John\n    1 --&gt; Ringo\n    2 --&gt; Paul\n    3 --&gt; George\n\n\n\n\n\n\nA dictionary:\n\n\n\n\n\nflowchart LR\n    subgraph values\n    Ringo\n    Starr\n    drums\n    end\n    subgraph keys\n    name\n    surname\n    instrument\n    end\n    name --&gt; Ringo\n    surname --&gt; Starr\n    instrument --&gt; drums\n\n\n\n\n\n\n\n\n\n\n\n\nWe create a dictionary using curly braces ({}), and we write the key and the value separated by a colon (:): {key1: value1, key2: value2}. In the previous example the keys were: “name”, “surname”, and “instrument”, and the values were: “Ringo”, “Starr”, and “drums”. As you have seen in the previous example, we can get the values stored in a dictionary by using square brackes: some_dictionary[key].\nWe can ask Python to give us the all keys and values of a dictionary.\n\n\n\n\n\n\nBe aware that the methods keys and values return iterators, so to print lists we have to pass those iterators to the list function.\nGiven the following dictionary, find out which is the minimum age of a student.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that you can use the min function to get the minimum value of a list or of an iterator.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also iterate through tuples of keys and values using the items method.\n\n\n\n\n\n\nIf we want to know how many items is the dictionary holding we use the len function.\n\n\n\n\n\n\nWe have two lists, one with values and another one with keys, create a dictionary using them.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively this could be done using the zip function.\n\n\n\n\n\n\n\n\n\n\nCreate a dictionary that holds the complementary DNA nucleotides and use it to create a reverse and complementary DNA sequence.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/dictionaries.html#dicts-and-lists-can-hold-other-compound-objets",
    "href": "chapters_python/3_compound_types/dictionaries.html#dicts-and-lists-can-hold-other-compound-objets",
    "title": "9  Python Code - Dictionaries",
    "section": "9.3 Dicts and lists can hold other compound objets",
    "text": "9.3 Dicts and lists can hold other compound objets\nPrint the name and age of these two students.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange the name of the gene2 from BRCA to BRCA2:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/dictionaries.html#dicts-are-mutable",
    "href": "chapters_python/3_compound_types/dictionaries.html#dicts-are-mutable",
    "title": "9  Python Code - Dictionaries",
    "section": "9.4 dicts are mutable",
    "text": "9.4 dicts are mutable\nDictionaries, like lists, are mutable, we can add, modify or remove, items after their creation. For instance, we can create an empty dictionary and fill it with values later.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/dictionaries.html#dict-keys-are-unique",
    "href": "chapters_python/3_compound_types/dictionaries.html#dict-keys-are-unique",
    "title": "9  Python Code - Dictionaries",
    "section": "9.5 dict keys are unique",
    "text": "9.5 dict keys are unique\nOne very important aspect of a dictionary is that keys are unique. If we try to store two values under the same key, only one will remain.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/3_compound_types/dictionaries.html#key-in-dict",
    "href": "chapters_python/3_compound_types/dictionaries.html#key-in-dict",
    "title": "9  Python Code - Dictionaries",
    "section": "9.6 key in dict",
    "text": "9.6 key in dict\nWe can check if a key is stored in a dictionary by using the in operator.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/if.html",
    "href": "chapters_python/4_control_flow/if.html",
    "title": "10  Python Code - If",
    "section": "",
    "text": "10.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>If</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/if.html#resources",
    "href": "chapters_python/4_control_flow/if.html#resources",
    "title": "10  Python Code - If",
    "section": "",
    "text": "Conditional statements in Real Python.\nif statement in the official documentation.\nControl flow in wikipedia.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>If</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/if.html#if",
    "href": "chapters_python/4_control_flow/if.html#if",
    "title": "10  Python Code - If",
    "section": "10.2 if",
    "text": "10.2 if\nif is one of the basic control flow statements. It allows us to execute some code only if a given condition is met.\n\n\n\n\n\n\nIf the condition is not met the code inside the if block won’t be executed.\n\n\n\n\n\n\nEvery line included in the block will be executed, not just the first one.\n\n\n\n\n\n\nFix the following code to print “Done!” even when the condition is not met.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that a block ends when the indentation returns to the previous level.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>If</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/if.html#else",
    "href": "chapters_python/4_control_flow/if.html#else",
    "title": "10  Python Code - If",
    "section": "10.3 else",
    "text": "10.3 else\nIt is common that we want to execute some code when the condition is met, and some other code when the condition is not met, for that we use else.\n\n\n\n\n\n\n\n\n\n\n\n\nFix this code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite some code capable of, given a pair of numbers, finding out which is the highest.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFix the following code to prevent the error when a = 0.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>If</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/if.html#elif",
    "href": "chapters_python/4_control_flow/if.html#elif",
    "title": "10  Python Code - If",
    "section": "10.4 elif",
    "text": "10.4 elif\nelif allows us to test for different conditions sequentialy.\n\n\n\n\n\n\nWhen several conditions are met only the first True one will be executed.\n\n\n\n\n\n\nIn Python, a more powerful alternative to elif is the match statement.\nWrite a program that classifies a person into: baby, child, teenager, young, and old\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program that writes the quote of the selected philosopher.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>If</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/if.html#boolean-casting",
    "href": "chapters_python/4_control_flow/if.html#boolean-casting",
    "title": "10  Python Code - If",
    "section": "10.5 Boolean casting",
    "text": "10.5 Boolean casting\nWhen a condition is evaluated, internally the if statement casts anything given to a boolean. So, you will usually see expressions like:\n\n\n\n\n\n\nIt would be very weird to write:\n\n\n\n\n\n\nRemember that everything that we talked about booleans and boolean arithmetic is applicable to the if evaluation.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>If</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/for.html",
    "href": "chapters_python/4_control_flow/for.html",
    "title": "11  Python Code - For",
    "section": "",
    "text": "11.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>For</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/for.html#resources",
    "href": "chapters_python/4_control_flow/for.html#resources",
    "title": "11  Python Code - For",
    "section": "",
    "text": "for statement in the official documentation.\nfor loops in Real Python.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>For</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/for.html#for",
    "href": "chapters_python/4_control_flow/for.html#for",
    "title": "11  Python Code - For",
    "section": "11.2 for",
    "text": "11.2 for\nfor allows us to execute a block of code for each item. The variable defined after the for keyword will take the value of each item, one at a time, one for each iteration.\n\n\n\n\n\n\nWhat would happen if we executed the following code? How would you fix it?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternally the for loop works by calling the next on an iterator from the given iterable. An iterator is an object that, when given to the next function, supports the generation of one item at a time, until it runs out of items. So the previous for loop would be, more or less, equivalent running the following code.\n\n\n\n\n\n\nPython has another way of doing loops, the while statement.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>For</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/for.html#break",
    "href": "chapters_python/4_control_flow/for.html#break",
    "title": "11  Python Code - For",
    "section": "11.3 break",
    "text": "11.3 break\nAt any iteration the loop could be completely stopped, broken, by using the break statement.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>For</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/for.html#continue",
    "href": "chapters_python/4_control_flow/for.html#continue",
    "title": "11  Python Code - For",
    "section": "11.4 continue",
    "text": "11.4 continue\nThe continue statement allows us to move to the next iteration without running the rest of the code in the block.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>For</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/for.html#range",
    "href": "chapters_python/4_control_flow/for.html#range",
    "title": "11  Python Code - For",
    "section": "11.5 range",
    "text": "11.5 range\nThis kind of for loop, the one implemented in Python, in other languages is known as a foreach loop. To have the functionallity available in other programming languages, in which the for statement just iterates over some numbers, you could combine a for loop with the range function.\nWrite a for loop that prints the first 10 natural numbers.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can use a list or the range function.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nWith a list.\n\n\n\n\n\n\nWith the range function.\n\n\n\n\n\n\n\n\n\n\nCreate a program that writes the following:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThere are many ways of solving this exercise, here you have some.\n\n\n\n\n\n\n\n\n\n\n\n\nUsing map and range.\n\n\n\n\n\n\nUsing a list comprenhension.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>For</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/for.html#enumerate",
    "href": "chapters_python/4_control_flow/for.html#enumerate",
    "title": "11  Python Code - For",
    "section": "11.6 enumerate",
    "text": "11.6 enumerate\nIt is quite common to require both the item and its index. We could do it like:\n\n\n\n\n\n\nHowever, this pattern is so common that Python have solved it using the function enumerate.\n\n\n\n\n\n\nEnumerate works by creating an iterator of tuples with two elements: the index, and the original item.\n\n\n\n\n\n\nAnd since Python supports mutiple assigment what we are doing in the for loop is equivalente to:",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>For</span>"
    ]
  },
  {
    "objectID": "chapters_python/4_control_flow/code_blocks.html",
    "href": "chapters_python/4_control_flow/code_blocks.html",
    "title": "12  Python Code - Code Blocks",
    "section": "",
    "text": "A block of code is a set of statements, functions or instructions that are grouped together. In most programming languages the blocks of code are created by using curly braces ({}). For instance, in C the statements executed when a test condition is met would be written as:\nif (testCondition) {\n   statement1;\n   statement2;\n   statement3;\n}\nIn Python a block of code is created by using indentation.\n\n\n\n\n\n\n\nIn the if and for the code starts with a colon (:)\nThe next line after the colon should be indented\nThe block ends when the indentation goes back to the previous level.\n\nThe standard is to create the indentation by using four spaces.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Code Blocks</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html",
    "href": "chapters_python/exercises/exercises_1.html",
    "title": "13  Exercises 1",
    "section": "",
    "text": "13.1 Odd and even\nFor the numbers from 1 to 20 write which ones are odd and even.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#odd-and-even",
    "href": "chapters_python/exercises/exercises_1.html#odd-and-even",
    "title": "13  Exercises 1",
    "section": "",
    "text": "Tip\n\n\n\n\n\nrange needs a start and stop.\nYou can use the module operator (%) to check if a number is even.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#multiplication-table",
    "href": "chapters_python/exercises/exercises_1.html#multiplication-table",
    "title": "13  Exercises 1",
    "section": "13.2 Multiplication table",
    "text": "13.2 Multiplication table\nPrint the multiplication table for a given number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#accumulate-sums",
    "href": "chapters_python/exercises/exercises_1.html#accumulate-sums",
    "title": "13  Exercises 1",
    "section": "13.3 Accumulate sums",
    "text": "13.3 Accumulate sums\nSum all numbers from 1 up to a given number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nUsing sum and range with no for loop.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#sum-digits",
    "href": "chapters_python/exercises/exercises_1.html#sum-digits",
    "title": "13  Exercises 1",
    "section": "13.4 Sum digits",
    "text": "13.4 Sum digits\nWrite a program that sums all the digits of a number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can transform, type cast, strings into numbers and number into strings using int and str.\nRemember also that strings are iterable, so if you give a string to a for it will iterate through every character.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nYou could also create a list with the numbers, and the use sum.\n\n\n\n\n\n\nThe same result could be calculated without using a for loop using functional programming.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#factorial",
    "href": "chapters_python/exercises/exercises_1.html#factorial",
    "title": "13  Exercises 1",
    "section": "13.5 Factorial",
    "text": "13.5 Factorial\nCalculate the factorial for a number.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nUsing a functional approach with reduce.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#long-and-short-words",
    "href": "chapters_python/exercises/exercises_1.html#long-and-short-words",
    "title": "13  Exercises 1",
    "section": "13.6 Long and short words",
    "text": "13.6 Long and short words\nCreate a program that given a list of words prints if they are short (less than 4 characters long), not so long (between 4 and 7 characters), and very long (more than 7 characters).\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can use the len function to get the number of characters of a string and you could create an if, elif, else.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#filter-numbers",
    "href": "chapters_python/exercises/exercises_1.html#filter-numbers",
    "title": "13  Exercises 1",
    "section": "13.7 Filter numbers",
    "text": "13.7 Filter numbers\nCreate a program that given a list of numbers it filters out the ones bigger than 10.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can create an empty list and append items to it one by one.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nIt could be solved using continue.\n\n\n\n\n\n\nOr with the filter function.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#find-beatles",
    "href": "chapters_python/exercises/exercises_1.html#find-beatles",
    "title": "13  Exercises 1",
    "section": "13.8 Find Beatles",
    "text": "13.8 Find Beatles\nWrite a program that outputs which people were a Beatle member and their index in the list.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can use enumerate to get the index in any for, and that the in operator allows you to check if an item is in a list.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nIf the list were large it would be much efficient to use a dictionary or a set than a list. The solution using a set would be:\n\n\n\n\n\n\nUsing filter and a lambda we could even skip many iterations of the for.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#remove-vowels",
    "href": "chapters_python/exercises/exercises_1.html#remove-vowels",
    "title": "13  Exercises 1",
    "section": "13.9 Remove vowels",
    "text": "13.9 Remove vowels\nWrite a program that removes all vowels (aeiou) from a given text.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can use the in operator to check if a substring is found inside another string.\nA possibility is to create a for loop that iterates through every letter in the text and that stores the letter in a list only if it is not a vowel.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\nThe same could be done without a for loop, using the filter function.\n\n\n\n\n\n\nOr with a list comprenhension.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#read-numbers-in-csv",
    "href": "chapters_python/exercises/exercises_1.html#read-numbers-in-csv",
    "title": "13  Exercises 1",
    "section": "13.10 Read numbers in CSV",
    "text": "13.10 Read numbers in CSV\nWe are reading a comma-separated values (CSV) text file. In each file we have measures and we want to calculate the mean, max, min and sum.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that the str split method can split a text string into a list and the float funtion can transform a text into a number.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternativerly you could use the map and sum functions.\n\n\n\n\n\n\nOr the mean function and a list comprenhension.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#store-multiples",
    "href": "chapters_python/exercises/exercises_1.html#store-multiples",
    "title": "13  Exercises 1",
    "section": "13.11 Store multiples",
    "text": "13.11 Store multiples\nWrite a program that stores all the multiples of 7 from 1 to n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that you can use the range function to get the numbers and the modulo operator to get the remainder of an integer division.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively, it could be solved using filter and a lambda function.\n\n\n\n\n\n\nOr a list comprenhension (this is a very common style that you will find in Python code).",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#count-words",
    "href": "chapters_python/exercises/exercises_1.html#count-words",
    "title": "13  Exercises 1",
    "section": "13.12 Count words",
    "text": "13.12 Count words\nCreate a program that given some text it counts how many times a word appears.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively you could use the Counter class of the collections module.\n\n\n\n\n\n\nOr you could do it with a nested list comprenhension.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#collect-quotes",
    "href": "chapters_python/exercises/exercises_1.html#collect-quotes",
    "title": "13  Exercises 1",
    "section": "13.13 Collect quotes",
    "text": "13.13 Collect quotes\nCreate a program that collects the quotes from each author in different lists.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_1.html#reverse-and-complement-dna",
    "href": "chapters_python/exercises/exercises_1.html#reverse-and-complement-dna",
    "title": "13  Exercises 1",
    "section": "13.14 Reverse and complement DNA",
    "text": "13.14 Reverse and complement DNA\nWrite a program capable of creating a reversed and complementary sequence of DNA. To do it you have to go from the end to the start and transform A into T, T into A, C into G and G into C.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Exercises 1</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/definition.html",
    "href": "chapters_python/5_functions/definition.html",
    "title": "14  Python Code - Functions",
    "section": "",
    "text": "14.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/definition.html#resources",
    "href": "chapters_python/5_functions/definition.html#resources",
    "title": "14  Python Code - Functions",
    "section": "",
    "text": "Python function and return in Real Python.\nFunctions in the Microsoft Python for beginners course.\nScopes in Python in Real Python.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/definition.html#definition-and-calling",
    "href": "chapters_python/5_functions/definition.html#definition-and-calling",
    "title": "14  Python Code - Functions",
    "section": "14.2 Definition and calling",
    "text": "14.2 Definition and calling\nIn Python functions are defined by using the def keyword.\n\n\n\n\n\n\nIf you run the previous piece of code you won’t see any result. Once you define a function, the function will be ready to be used, but in order to use it you need to call it. We call a function by using parentheses (()).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe lines that belong to the function are the lines indented after the function definition line. Those are the lines in the function block block. Fix the following code:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is important to understand how the flow, the order in which the lines are executed, is changed by the function. Once you call the function the flow goes into the function until the function ends. At that point the flow is sent back to the line that called the function.\nTry to fill out the numbers in the prints of the following code to track the flow of execution. In which order will be the lines executed?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/definition.html#scopes-and-arguments",
    "href": "chapters_python/5_functions/definition.html#scopes-and-arguments",
    "title": "14  Python Code - Functions",
    "section": "14.3 Scopes and arguments",
    "text": "14.3 Scopes and arguments\nThe code inside a function has its own variables, and those are not shared between functions and between the function and the rest of the code. To use a value inside a value, usually, we pass the variable to the function. To understand what do we mean when we say that we pass some data to a function we need to understand the concept of the scope.\nWhen we are programming we store and access data in memory. As we have seen, we refer to the data stored in memory by using variables. We could think that those variables, once they are created, are available in every part of our program. If you used that approach when you tried to build a program with more than a few lines of code, it would become very difficult to track which part of the program had changed a variable. So maintining those large programs would be very difficult.\nThe scope defines where in the code a variable is available, and functions define their own scope. In a computer program not all data is available to every part of the code. For instance, the variables that are defined inside a function are not available outside of the function.\n\n\n\n\n\n\nWe say that the variables defined in the function are in the function scope, that means that they are not available ouside of the function.\n\n\n\n\n\n\nWe get a “‘name’ is not defined error” because the variable name was created inside the say_hello function, so in the say_hello scope, and is not available outside. A variable can only be used when is in the current scope. It is said that the function has a local scope in which its variables are available.\nSchema with the scope of a function call:\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph def[\"def calc_area(width, height):\"]\n        subgraph func_scope[\"Function scope\"]\n            subgraph return\n               ret[\"return area\"]\n            end\n            subgraph in[\"function variables\"]\n               var[\"area = width * height\"]\n            end\n            subgraph arguments\n               width\n               height\n            end\n        end\n    end\n    subgraph result[\"result = calc_area(2, 3)\"]\n        subgraph caller[\"Caller scope\"]\n            subgraph result_[\" \"]\n               result__[\"result =\"]\n            end\n            subgraph funccall[\"Function call\"]\n               call1[\"calc_area(2, 3)\"]\n            end\n        end\n    end\n    return ---&gt; result__\n    call1 ---&gt; arguments\n\n\n\n\n\n\n\n14.3.1 Global scope\nBe careful because Python also has a global scope, and if you create the variable outside the function it will be available inside. We can use the variables defined in the global scope inside any function.\n\n\n\n\n\n\nIn this case the variable name has been created in the global scope, it is a global variable available everywhere. In general, avoid creating global variables, specially if they are not inmutable constants. As a general rule the use of the global scope is discouraged, try not to use it. If you think you need a global variable, think twice, in most cases is better not to use them. This is an advanced topic, but here’s a tip for the future you, to keep states it might be much better to use objects, instances of a class, that global variables. For now, this is too advanced. Just remember, try very hard not to use global varibles, although you can allow some exceptions with some inmutable ones used for global configurations. It is common to use this kind of global variables, inmutables and related to configuration, and, by convention, in Python, people name them using all caps variable names.\n\n\n\n\n\n\nPython discourages some uses of the use the global scope, and the behaviour of these variables is atypical.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n14.3.2 Passing data to a function, function arguments\nSo, when the function requires some data to carry an action, we should pass that data explictly to the function. For instance, if we want a function to print a personalized greeting, it could need the name of the person.\n\n\n\n\n\n\nPassing data to a function is easy, but a lot is going on under the hood:\n\nWe have created a text string (“Jane”). That means that Python has created and stored a object of type str in memory.\n\n\n\n\n\n\nflowchart TB\n    subgraph main [ ]\n    person:::invisible\n    end\n    subgraph say [ ]\n    name:::invisible\n    end\n    Memory:::memory\n    subgraph Memory\n    Jane[\"'Jane'\"]\n    end\n    person --&gt; Jane\n    name --&gt; Jane\n    classDef variable fill:#f96\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n    linkStyle 0,1 stroke-width:0px\n\n\n\n\n\n\n\nWe have assigned the variable person to that string, so now person refers to that str object stored in memory.\n\n\n\n\n\n\nflowchart TB\n    subgraph main [global scope]\n    person\n    end\n    subgraph say [ ]\n    name:::invisible\n    end\n    Memory:::memory\n    subgraph Memory\n    Jane[\"'Jane'\"]:::variable\n    end\n    person --&gt; Jane\n    name --&gt; Jane\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n    linkStyle 1 stroke-width:0px\n\n\n\n\n\n\n\nWhen we call the function we pass the reference of the object, the variable person, to the function.\nThe function receives the reference to the str object and assigns to it a new reference, in this case called name. It is very important to understand that although the object is the same, the “Jane” string, we have created a new reference to it, the new variable name.\n\n\n\n\n\n\nflowchart TB\n    subgraph main [global scope]\n    person\n    end\n    subgraph say [say_hello scope]\n    name\n    end\n    Memory:::memory\n    subgraph Memory\n    Jane[\"'Jane'\"]\n    end\n    person --&gt; Jane\n    name --&gt; Jane\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/definition.html#return",
    "href": "chapters_python/5_functions/definition.html#return",
    "title": "14  Python Code - Functions",
    "section": "14.4 return",
    "text": "14.4 return\nScopes have also to be taken into account when getting a result out of the function.\n\n\n\n\n\n\nIf we want to get data out of the function we use the return statement. Let’s see how we can return data to the caller.\n\n\n\n\n\n\nWe use the return statement to return a value generated in the function to the caller. Again, like in the arguments passed to the function, the caller will receive a new reference to the value stored in memory that can assign to a new variable. return is used to move a result in memory between scopes. For instance, in the previous example there is a variable, inside the function, named area, but in the first call we store the reference in a variable named result. area and result are two variables, two references to the same value stored in memory, but they are variables that belong to different scopes. In this case area belongs to the scope of the calc_rect_area function and result to the global scope.\nFix the following code\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nDoes the function return something?\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a function that returns “odd” or “even” depending on the number that we pass.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWrite a program with two functions, one that transforms from Fahrenheit to Celsius, and another one from Celsius to Fahrenheit.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefine a function that reverses a list, like the reversed funtion.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nRemember that indexing has the posibility of reversing using -1 as the step (some_sequence[::-1]).\n\n\n\n\n\n\n\n\n\n\n\nNote",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/definition.html#function-calls-are-independent",
    "href": "chapters_python/5_functions/definition.html#function-calls-are-independent",
    "title": "14  Python Code - Functions",
    "section": "14.5 Function calls are independent",
    "text": "14.5 Function calls are independent\nNote also that each time that the function returns, its scope, the variables created inside the function and available to it, is erased, so each call will be independent. Once a return is executed in a function, the function returns and its scope is destroyed with all its variables.\n\n\n\n\n\n\nWhat would be the result of executing the following code and why?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nEverytime we call a function a new scope with new data is created and the function starts its execution in its first line and ends its execution once it encounters the first return. That’s why no matter how many time we call this function it will always return “Hi” and “Bye” will be never reached.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/definition.html#methods",
    "href": "chapters_python/5_functions/definition.html#methods",
    "title": "14  Python Code - Functions",
    "section": "14.6 Methods",
    "text": "14.6 Methods\nSo far we haven’t talked about clases and their instances, the objects, because they are a slightly more advanced topic related to Object-oriented programming (OOP).\nPython is a object oriented language, in fact, in Python almost everything is an object. And although we are not going to discuss this topic yet, it is important to understand the concept and use of methods, the object “functions”. In fact we have already used methods when dealing with strings.\n\n\n\n\n\n\nupper is a method, a function associated with an object. In this case the object is the string “hello” and upper is a function that acts on that object. By convention functions associated to objects are called methods. So upper is a method, a function associated to the objects of type str. You can think on a method like on a function that has as its first argument the given object. If upper were a standard function, the previous code would be:\ns = \"hello\"\ns = upper(s)\nprint(s)\nSomething similar to that would work if upper were a normal function but, instead, upper is a method associated to an object, so the syntax is different, we use a dot after the object, then the name of the method/function, and then the language makes sure that the object is passed as the first argument to this method.\nIf you want to understand Python you need to learn about objects, classes, methods and properties, because Python is a deeply object-oriented language, but this is a topic that we can leave for later.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/definition.html#anonymous-functions-lambdas",
    "href": "chapters_python/5_functions/definition.html#anonymous-functions-lambdas",
    "title": "14  Python Code - Functions",
    "section": "14.7 Anonymous functions, lambdas",
    "text": "14.7 Anonymous functions, lambdas\nIn Python, and many other programming languages, we can create anonymous functions, a function with no name. This is a more abstract idea, but they are used quite commonly in Python, so it would be nice, at least, that you could recognized them.\nIn Python anonymous functions are created with the lambda statement. lambdas are usually very small functions, just one line, and they are used as parameters for other functions. For instance, they are very common in as the key argument to the sorted function.\n\n\n\n\n\n\nYou can learn more about lambdas in the official documentation or in Real Python.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/more.html",
    "href": "chapters_python/5_functions/more.html",
    "title": "15  More on functions",
    "section": "",
    "text": "15.1 Resources",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>More on functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/more.html#resources",
    "href": "chapters_python/5_functions/more.html#resources",
    "title": "15  More on functions",
    "section": "",
    "text": "More on defining functions in the official documentation.\nOptional arguments and args and kwargs in Real Python.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>More on functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/more.html#return-several-variables",
    "href": "chapters_python/5_functions/more.html#return-several-variables",
    "title": "15  More on functions",
    "section": "15.2 Return several variables",
    "text": "15.2 Return several variables\nFunctions can return multiple results, we just need to separate them with commas. Complete the following code.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThink about how is it possible that all the different options in the following code work. What is going on?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nUnder the hood both functions are returning the same, a tuple, an imutable list.\n\n\n\n\n\n\nSo in the first function “return a, b” is first creating the tuple (a, b), and then returning it.\nWhen we call a function that returns a tuple we can assing the tuple to a variable, like in:\n\n\n\n\n\n\nBut we can also use the mutiple assignment that we studied for lists and tuples.\n\n\n\n\n\n\n\n\n\n\nWrite a function that given a list of numbers it calculates and returns the maximum and the minimum.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou could iterate through the numbers using a for loop. In each iteration you could check if the number is lower than the current minimum or is larger than the current maximum. In the first iteration the current minimum and maximum could be None.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively you could do it with the min and max functions.\n\n\n\n\n\n\n\n\n\n\nIn fact Python functions can only return just one thing, an object, one object. Every Python function always returns just one object.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>More on functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/more.html#keyword-arguments",
    "href": "chapters_python/5_functions/more.html#keyword-arguments",
    "title": "15  More on functions",
    "section": "15.3 Keyword arguments",
    "text": "15.3 Keyword arguments\nSo far we have seen that functions can be called by passing arguments to them.\n\n\n\n\n\n\nHowever, you will see another syntax in Python code: keyword arguments.\n\n\n\n\n\n\nWhen we use keyword arguments the order in which the arguments is passed is irrelevant.\n\n\n\n\n\n\nYou can even mix arguments passed by its order with arguments passed using keywords.\n\n\n\n\n\n\nThere is only one thing that is not allowed, to pass an argument with no keyword after an argument passed using a keyword.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>More on functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/more.html#default-arguments",
    "href": "chapters_python/5_functions/more.html#default-arguments",
    "title": "15  More on functions",
    "section": "15.4 Default arguments",
    "text": "15.4 Default arguments\nIn function calls it is very common to give, in the function definition, default values to some arguments. These parameters can then be omitted in the function call unless we want to change their values.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>More on functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/5_functions/more.html#references-to-mutable-objects",
    "href": "chapters_python/5_functions/more.html#references-to-mutable-objects",
    "title": "15  More on functions",
    "section": "15.5 References to mutable objects",
    "text": "15.5 References to mutable objects\nIn Python variables are references to objects. Try to guess what will be the result of running the following code:\n\n\n\n\n\n\nGive x a value in order the get the result to be 10. Should x be 4 or 6?\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith lists the behaviour seems different.\n\n\n\n\n\n\nWhy do we get these different results?\nLet’s think about what is going on.\n\na = \"hello\"\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b:::invisible\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"'hello'\"]\n    hello2[\"'HELLO'\"]:::invisible\n    end\n    a --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\n\n# a.upper() creates a new string, it does not modify\n# the original string that remains intact in memory\n# and now b refers to the new string \"HELLO\"\nb = a.upper()\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"'hello'\"]\n    hello2[\"'HELLO'\"]:::invisible\n    end\n    a --&gt; hello1\n    b --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\n\nb = a\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"'hello'\"]\n    hello2[\"'HELLO'\"]\n    end\n    a --&gt; hello1\n    b --&gt; hello2\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\nWith mutable objects, like lists, the result will be different.\n\na = [\"hello\", \"Jane\"]\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b:::invisible\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"['hello', 'Jane']\"]\n    end\n    a --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\n\nb = a\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"['hello', 'Jane']\"]\n    end\n    a --&gt; hello1\n    b --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\n\n# We are modifying the original list\nb[0] = b[0].upper()\n\n# b[0] refers to the string \"hello\"\n# b[0].upper() creates a new string in memory \"HELLO\"\n# so b[0] = b[0].upper() is equivalent to\nb[0] = \"HELLO\"\n# We are asking to the list refered by b, the same list that a refers to,\n# to change its first member from \"hello\" to \"HELLO\"\n# So we get a modified list [\"HELLO\"] and both a and b refer still to this list\n# that is in fact the same original list, that is has changed its first member\n\n\n\n\n\n\nflowchart TB\n    subgraph variables\n    a\n    b\n    end\n    Memory:::memory\n    subgraph Memory\n    hello1[\"['HELLO', 'Jane']\"]\n    end\n    a --&gt; hello1\n    b --&gt; hello1\n    classDef invisible opacity:0%\n    classDef memory fill:#ccc\n\n\n\n\n\n\nThis is an aspect that varies from language to language. If you study a different programming language you will need to understand if the variables are ment to be values, pointers or references. In Python they are always references. You can read a Real Python tutorial about Python references.\nIn Python every variable is a reference, and arguments to functions are thus passed by reference. When we pass a text string or a list to a function Python creates new references to these objects. We have to be careful because if you pass a mutable object to a function the function might changed it.\n\n\n\n\n\n\nChanging inside the function a mutable object that have been passed to it without warning the function user is a common source of bugs and problems. This is not a good practice, try to avoid it! The previous code could be written to avoid this problem.\n\n\n\n\n\n\n\n15.5.1 Default mutable arguments\nWhen you create your own functions with default parameters you have to be careful because there is a gotcha. Remember that there are inmutable objects, like str, int or float, and mutable objects, like lists. A list is mutable because we can change its items after we have created it, but a text string is inmutable because once we have created we can not modify it (although be could derive other strings for it).\n\n\n\n\n\n\nIf you use a mutable object as a default parameter in a function definition, you will get into trouble.\n\n\n\n\n\n\nThe problem is that the default values for the arguments are created when the function is defined, so just once. Thus, in this example there is only one default empty list for all function calls to the create_guest_list function. Every time that we get the default list we are getting the same empty list. This would not be a problem if the object wasn’t mutable, but it is a huge problem with mutable objects. So the pattern that Python programmers use to avoid this problem is the following: setting the default value to None and creating the list, if needed, inside the function. In this way one different default empty list is created for each function call, not like before that only one was created when the function was defined.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>More on functions</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_2.html",
    "href": "chapters_python/exercises/exercises_2.html",
    "title": "16  Exercises 2",
    "section": "",
    "text": "16.1 Calculate the frequency of each item in a class\nWrite a function that given a list of items returns a dictionary with the frequency of each kind of item found in the list.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Exercises 2</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_2.html#calculate-the-frequency-of-each-item-in-a-class",
    "href": "chapters_python/exercises/exercises_2.html#calculate-the-frequency-of-each-item-in-a-class",
    "title": "16  Exercises 2",
    "section": "",
    "text": "Tip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively, you could do it using the Counter class and a dict comprenhension.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Exercises 2</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_2.html#solve-quadratic-equations",
    "href": "chapters_python/exercises/exercises_2.html#solve-quadratic-equations",
    "title": "16  Exercises 2",
    "section": "16.2 Solve quadratic equations",
    "text": "16.2 Solve quadratic equations\nA quadratic equation would be: a * x**2 + b * x + c = 0 You can solve it with the quadratic formula.\nWrite a function that solves the equation and returns its two roots and another function that checks the result. You can even try to solve equations with complex solutions using the cmath module.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nAlternatively you could even solve equations with complex solutions.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Exercises 2</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_2.html#read-the-genetic-code-into-a-dictionary",
    "href": "chapters_python/exercises/exercises_2.html#read-the-genetic-code-into-a-dictionary",
    "title": "16  Exercises 2",
    "section": "16.3 Read the genetic code into a dictionary",
    "text": "16.3 Read the genetic code into a dictionary\nThe dictionary should have the codon as the key and the aminoacid name as the value.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nsplitlines\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Exercises 2</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_2.html#write-a-program-that-translates-a-coding-sequence-into-a-protein",
    "href": "chapters_python/exercises/exercises_2.html#write-a-program-that-translates-a-coding-sequence-into-a-protein",
    "title": "16  Exercises 2",
    "section": "16.4 Write a program that translates a coding sequence into a protein",
    "text": "16.4 Write a program that translates a coding sequence into a protein\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nYou can get the position of every codon using the range function. Remember that range has a step argument that can be set to 3.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Exercises 2</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_2.html#create-a-restriction-map",
    "href": "chapters_python/exercises/exercises_2.html#create-a-restriction-map",
    "title": "16  Exercises 2",
    "section": "16.5 Create a restriction map",
    "text": "16.5 Create a restriction map\nRestriction enzymes recognize specific sequences, for instance:\n\nEcoRI: GATTC (cuts in the position between G and A, G^ATTC)\nHind III : AAGCTT (cuts in the position between A and A, AAGCT^T)\n\nGiven a sequence, create the restriction fragments that these two sequences would create:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Exercises 2</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/install.html",
    "href": "chapters_python/6_local_install/install.html",
    "title": "17  Local Install",
    "section": "",
    "text": "17.1 Python online\nSo far we have run the Python code in the web browser. In fact the web pages that we have used so far in the course included a version of the Python interpreter that has run the code inside the browser.\nThere are other sites that allow to run Python code online like:",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Local Install</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/install.html#python-online",
    "href": "chapters_python/6_local_install/install.html#python-online",
    "title": "17  Local Install",
    "section": "",
    "text": "The Future Coder IDE allows to write, run and debug Python programs.\nIn the Pyodide REPL the user can execute Python commands.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Local Install</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/install.html#operating-system-specific-installers",
    "href": "chapters_python/6_local_install/install.html#operating-system-specific-installers",
    "title": "17  Local Install",
    "section": "17.2 Operating system specific installers",
    "text": "17.2 Operating system specific installers\nRunning Python online is great, but for many uses we need to install it in our computer and run it locally. Python is open source and it is freely distributed in python.org. So, one way of getting Python is to go the download section in python.org, download the latest installer for your operating system and install it. That will install Python, but you might have some issues with it:\n\nYou will need to remember to install the Python updates.\nYou will be able to install only one Python version at a time.\nThe PATH operating system variable might end up not being correctly configured. So, although Python will be installed the interpreter won’t be directly available in the command-line shell.\n\nAlternativery, you could use a specific installer for your operating system, like the Microsoft Store for windows or the package manager of your Linux distribution. There are many different cases and alternatives, and they are covered in the Python Setup and Usage in python.org.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Local Install</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/install.html#anaconda",
    "href": "chapters_python/6_local_install/install.html#anaconda",
    "title": "17  Local Install",
    "section": "17.3 Anaconda",
    "text": "17.3 Anaconda\nAnother alternative to install Python locally is to use the anaconda installer. Anaconda ships Python, R, and many other tools used in data analysis and it is very convenient because the Anaconda installer and navigator make the experience of using Python very similar in different operating systems.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Local Install</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/install.html#jupyter",
    "href": "chapters_python/6_local_install/install.html#jupyter",
    "title": "17  Local Install",
    "section": "17.4 Jupyter",
    "text": "17.4 Jupyter\nAn alternative way of using Python in the browser, but with a local installation is jupyter. This is a tool commonly used in Data analysis, and it is included in the anaconda distribution.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Local Install</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/install.html#virtual-environments",
    "href": "chapters_python/6_local_install/install.html#virtual-environments",
    "title": "17  Local Install",
    "section": "17.5 Virtual environments",
    "text": "17.5 Virtual environments\nOnce you start using Python professionaly it will be highly advisable to use virtual environments. This is an advanced topic for this course, but you will have to learn about virtual environments if you plan to use Python. Here you have a couple of resources:\n\nVirtual environments in Real Python.\nvenv module documentation",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Local Install</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/install.html#uv",
    "href": "chapters_python/6_local_install/install.html#uv",
    "title": "17  Local Install",
    "section": "17.6 uv",
    "text": "17.6 uv\nThere is a new way to install Python: uv.\nOnce you install uv, it will:\n\nmanage the installation of different Python versions.\nrun Python scripts\nmanage Python projects, with their virtual environments and dependencies, for you.\n\nIn this course we will assume that you have installed uv.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Local Install</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/install.html#code-editor",
    "href": "chapters_python/6_local_install/install.html#code-editor",
    "title": "17  Local Install",
    "section": "17.7 Code editor",
    "text": "17.7 Code editor\nTo edit Python code you will need a code editor. Visual Studio Code is now one of the most popular ones.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Local Install</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/local_hello_world.html",
    "href": "chapters_python/6_local_install/local_hello_world.html",
    "title": "18  Local Hello World",
    "section": "",
    "text": "18.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Local Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/local_hello_world.html#resources",
    "href": "chapters_python/6_local_install/local_hello_world.html#resources",
    "title": "18  Local Hello World",
    "section": "",
    "text": "Real Python introduction to the Terminal.\nMicrosoft instroduction to PowerShell.\nThe Unix Shell in Software Carpentry.\nAn introduction to the Unix Shell (in Spanish)",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Local Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/local_hello_world.html#the-terminal",
    "href": "chapters_python/6_local_install/local_hello_world.html#the-terminal",
    "title": "18  Local Hello World",
    "section": "18.2 The terminal",
    "text": "18.2 The terminal\nWe are used to interact with our computers using Graphical User Interfaces, we click and drag icons and windows, but when we are developing Python programs our main way of interaction will be a command-line interface, a shell running in a terminal.\nIn a command-line interface, there is a prompt that promts the user the write a text command. Once we write the command and hit “enter” the computer runs the command, writes the output in the terminal and, after the command ends, the prompt will be ready for the next command. A command is just a computer program.\nIn different operating systems there are different terminal applications. In Linux and MacOS the application is usually named “terminal”, while in Windows there are different applications but we recommend “PowerShell” running in the “Windows Terminal”.\nDuring the course we recommend to use the editor Visual Studio Code to write Python code and this editor includes its our terminal, so you won’t need any other software. If you haven’t installed Visual Studio Code yet, we recommend that you do it.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Local Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/6_local_install/local_hello_world.html#hello-world-with-uv",
    "href": "chapters_python/6_local_install/local_hello_world.html#hello-world-with-uv",
    "title": "18  Local Hello World",
    "section": "18.3 Hello world with uv",
    "text": "18.3 Hello world with uv\nFirst, create a folder/directory in which you will create and store the Python programs. Then open Visual Studio Code and in the File menu select Open Folder and Open the Folder that you just created. Now in the Visual Studio File Explorer click with the right mouse button, select “New File…” and create a file named hello.py. All Python programs, by convention, are text files with the extension “.py”.\nAt this point Visual Studio should have created the “hello.py” text file and it will have open it, so we can type our first Python program.\n\nprint(\"Hello\")\n\nHello\n\n\nNow that we have our first program, we can run it in the Visual Studio Code Terminal. In the menu select “Terminal” -&gt; “New Terminal”. That will open a terminal inside Visual Studio Code. The prompt will indicate the folder/directory in which we are working.\nWe could run our Python programs directly using the Python interpreter command: “python”, but we are going to uv. If you haven’t installed uv, go ahead and do it. Once we have uv available, it will manage the Python installation for us and it will also run Python, just write in Visual Studio Terminal:\n\n$ uv run hello.py\n\n(The dollar sign is part of the prompt, we are just including it to show that the command is meant to be written in the prompt, but the dolar sign itself should not be written. In this case you should only write “uv run hello.py”)\nClick enter and, hopefully, you should have run your first Python program in the Terminal.\nIn most courses and tutorials you would not have installed uv, but just Python. In this case you would run the following command instead.\n\n$ python hello.py",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Local Hello World</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/paths.html",
    "href": "chapters_python/7_files/paths.html",
    "title": "19  Paths",
    "section": "",
    "text": "19.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Paths</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/paths.html#resources",
    "href": "chapters_python/7_files/paths.html#resources",
    "title": "19  Paths",
    "section": "",
    "text": "File and directory access section in the official documentation.\npathlib module documentation.\nFile sytem entry in wikipedia.\nFile system tutorial (in spanish).",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Paths</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/paths.html#paths",
    "href": "chapters_python/7_files/paths.html#paths",
    "title": "19  Paths",
    "section": "19.2 Paths",
    "text": "19.2 Paths\nThe location of a file in a file system is given by its path that is composed by its location in the directories, subdirectories and file name. Some examples of paths are: “c:\\users\\jane\\documents\\letter.doc”, “/users/jane/documents/letter.doc”, or “/home/jane/documents/letter.doc”.\nOne relevant difference between Windows and Unix-like (MacOS or Linux) operating systems is that in windows the path elements are separated by the “\\” character, whereas in MacOS and Linux the separator is “/”. Python is a multiplatform language, but we have to take into account these details if we want to write software capable of running in different operating systems.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Paths</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/paths.html#path-objects",
    "href": "chapters_python/7_files/paths.html#path-objects",
    "title": "19  Paths",
    "section": "19.3 Path objects",
    "text": "19.3 Path objects\nIn Python we could use strings to store path information and, in fact, that used to be the case, but now it is very common to work with Path objects available in the pathlib module. I would recommend to use these convenient objects instead of plain string objects.\n\n\n\n\n\n\nOne advantage of the Path objects is that we can join them together very easily.\n\n\n\n\n\n\nThe Path class some very convenient methods, like home that will give us the $HOME directory for the current user or cwd that will return the current working directory.\n\n\n\n\n\n\nPaths objects have a rich functionality. For instance, we can check if they exist in the file system.\n\n\n\n\n\n\nWe can list the contents of a directory.\n\n\n\n\n\n\nAnd we can get their names and suffixes.\n\n\n\n\n\n\nWe can also:\n\nopen a file using the open method of the Path objects\ncreate a directory using mkdir\nremove a file with unlink or a directory with rmdir.\n\nIn your home directory create a file named “hello.txt”, write in it the text “Hello world”, then get a directory listing and check that the file is really there, after that, open the file and read the text in it. Finally, remove the file and check that it has been really deleted.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n¿Cuál es el directorio de trabajo actual? ¿Hay algún fichero en él? ¿Del primero de los ficheros que aparecen en el listado, cuál es la ruta completa? ¿Se podría extraer de esta ruta el nombre del directorio y el fichero? ¿Cuál es la $HOME de nuestro usuario? ¿Del fichero ‘programa.py’ cuáles son el nombre y la extensión?",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Paths</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/read_write.html",
    "href": "chapters_python/7_files/read_write.html",
    "title": "20  Read and Write",
    "section": "",
    "text": "20.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Read and Write</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/read_write.html#resources",
    "href": "chapters_python/7_files/read_write.html#resources",
    "title": "20  Read and Write",
    "section": "",
    "text": "Real Python working and reading and writing files tutorials.\nReading and Writting files section in the official Python tutorial.\nContext managers in Real Python.\nOfficial documentation for the with statement.\nA Real Python tutorial about flush.\nIf you ever need to work with temporary files, the tempfile module is very useful.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Read and Write</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/read_write.html#open",
    "href": "chapters_python/7_files/read_write.html#open",
    "title": "20  Read and Write",
    "section": "20.2 open",
    "text": "20.2 open\nIn many ocassions we will need that our programs read information stored in files, thus a very common action will be to open a file. In Python we could open a file with the open function.\nLet’s imagine that we have a text file stored in the same directory/folder as our Python code. For instance, we could had downloaded Alice in wonderland from Project Gutenberg. This file is named 11.txt.utf-8, and we could open it using the following code.\n\nfile_name = \"11.txt.utf-8\"\nfile = open(file_name, 'rt')\n\nThe open function can take several parameters, but the most important ones are the file path and the mode.\nThe mode indicates if we are trying to open an existing file for reading (r mode) or creating new file for writing. Moreover, it indicates if we are dealing with a text or binary files. In this example the mode was “rt”, so we are trying to open a text file for reading and what the open function returns to us is a Text IO file object that will allow us to read the file.\n\n20.2.1 Read text\nNow that we know how to open a file, let’s try to read it. The most common way to read a text file is to use a for loop.\n\nfile_name = \"11.txt.utf-8\"\nfile = open(file_name, 'rt')\n\nfor line in file:\n    print(line)\n\nTry to print only the first 10 lines.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\nIt would be easier to use enumerate.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Read and Write</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/read_write.html#write",
    "href": "chapters_python/7_files/read_write.html#write",
    "title": "20  Read and Write",
    "section": "20.3 Write",
    "text": "20.3 Write\nWe could also create a new file to write in it by using the mode “wt” (write, text). Once we have the file object we can write in it using the write method.\n\nfile_name = \"my_output_file.txt\"\nfile = open(file_name, 'wt')\nfile.write(\"Hello world\")\n\nCreate a file, and write in it two lines, like “Hi” and “Bye”, in it.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Read and Write</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/read_write.html#close-and-with",
    "href": "chapters_python/7_files/read_write.html#close-and-with",
    "title": "20  Read and Write",
    "section": "20.4 close and with",
    "text": "20.4 close and with\nSo far we have not closed our file object after we are done with them, but we really should. So, the proper way to read a file would be:\n\nfile_name = \"some_file.txt\"\nfile = open(file_name, 'rt')\n\nfor line in file:\n    print(line)\n\nfile.close()\n\nFile objects are limited by the operating system, so that’s one reason for closing them. If we don’t do it Python will try to do it for us after the variable that holds the file object goes out of scope, but it’s better if we do it by ourselves.\nEven better, we could use the with statement. with will take care of closing the file after finishing the with block, even in the event of an exception ocurring within the block.\n\nfile_name = \"some_file.txt\"\n\nwith open(file_name, 'rt') as file:\n    for line in file:\n        print(line)",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Read and Write</span>"
    ]
  },
  {
    "objectID": "chapters_python/7_files/read_write.html#buffers-and-flush",
    "href": "chapters_python/7_files/read_write.html#buffers-and-flush",
    "title": "20  Read and Write",
    "section": "20.5 Buffers and flush",
    "text": "20.5 Buffers and flush\nClosing the file is even more important when writing files. We could think that every time that we use the write method Python writes the given contents in disk, but this is not so. In fact what the write method does is to write the given content in a memory buffer. It writes in memory because memory is much faster than disk. It would be very slow to write down in disk every time. When does Python decides to really write down in disk? Well, from time to time, but usually we do not take care of that. What we know for sure is that Python writes down everything that is to write when whe close the file calling the close method. So, close the file.\nIf you need to make sure that Python writes down to disk everything you have written so far you could also use the flush method, but don’t do it every time that you write, because that would be very slow.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Read and Write</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/modules.html",
    "href": "chapters_python/8_modules_packages/modules.html",
    "title": "21  Modules and packages",
    "section": "",
    "text": "21.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Modules and packages</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/modules.html#resources",
    "href": "chapters_python/8_modules_packages/modules.html#resources",
    "title": "21  Modules and packages",
    "section": "",
    "text": "Modules section on the official Python tutorial.\nReal Python tutorials on modules and packages and the import statement.\npip information in wikipedia and in the official documentation.\nVirtual environment primer in Real Python.\nuv documentation.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Modules and packages</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/modules.html#modules",
    "href": "chapters_python/8_modules_packages/modules.html#modules",
    "title": "21  Modules and packages",
    "section": "21.2 Modules",
    "text": "21.2 Modules\nProgramming is about mixing ideas; you take the idea of reading a file with data with the idea of doing a statistical test and of plotting a chart and you have created a program that analyzes and plots the data that you needed. Programming languages are usually quite limited in what they can directly do, but they are expanded by adding preprogrammed functionality. Moreover, if would be very inefficient to program the same functionallity over and over again, for instance, to create the same parsing or statistical functions in every program that you need. Thus programming languages have ways of not repeating yourself.\nIn Python it is very easy to create a piece of code, like a function, in one file and using it in another. Let’s create a file called greeting.py that implements the following function.\n\n\n\n\n\n\nNow, in the same directory we are going to create a new program that will use this function. Let’s create the file hello.py with the following code.\n\n\n\n\n\n\nWhen you run hello.py the first line imports the function print_hello from greeting.py and the function is ready to run. You have created and used your first Python module: greeting.\nimport can be used in a different way. Let’s create the file hello2.py\n\n\n\n\n\n\nIn this case we have imported the greeting module and then we have used the print_hello function inside of this module by using a point notation.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Modules and packages</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/modules.html#packages-and-the-standard-library",
    "href": "chapters_python/8_modules_packages/modules.html#packages-and-the-standard-library",
    "title": "21  Modules and packages",
    "section": "21.3 Packages and the standard library",
    "text": "21.3 Packages and the standard library\nModules can be organized in directories and subdirectories creating packages. By default Python ships with many packages, collectively called the standard library, ready to be used.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Modules and packages</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/modules.html#installing-packages",
    "href": "chapters_python/8_modules_packages/modules.html#installing-packages",
    "title": "21  Modules and packages",
    "section": "21.4 Installing packages",
    "text": "21.4 Installing packages\nAs we have already seen Python can import modules found in the same directory, but it is also able to look for packages and modules elsewhere. There is a list of directories in which Python looks for these packages and modules, the python path. If you are curious you can check which are those directories:\n\n\n\n\n\n\nUsually, you don’t need to worry about these details, they are taken care by the tools that install and manage the Python packages. The most popular tool is pip and this is the tool that I have used the most, but I have recently switched to uv.\nPython packages are collected in the pypi repository. Both pip and uv, by default, grab from pypi then packages that you want to install. The Python ecosystem, the amount of functionallity available is huge and no course can describe all the packages available (more than half a million). The best way to find out which are the most relevant packages for your needs are reading about the kind of problems that you want to solve and interacting with the community that works on them.\nBefore installing packages I highly recommend to read about virual environments. If you plan to use Python professionaly you must understand and use them.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Modules and packages</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/std_library.html",
    "href": "chapters_python/8_modules_packages/std_library.html",
    "title": "22  Standard Libraries",
    "section": "",
    "text": "22.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Standard Libraries</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/std_library.html#resources",
    "href": "chapters_python/8_modules_packages/std_library.html#resources",
    "title": "22  Standard Libraries",
    "section": "",
    "text": "Standard library official documentation.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Standard Libraries</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/std_library.html#shutil",
    "href": "chapters_python/8_modules_packages/std_library.html#shutil",
    "title": "22  Standard Libraries",
    "section": "22.2 shutil",
    "text": "22.2 shutil\nThe shutil module allow us to copy and delete files and directories. copy copies files, and copytree directories. Remember that in the pathlib module there was more functionality to create an delete files and directories.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Standard Libraries</span>"
    ]
  },
  {
    "objectID": "chapters_python/8_modules_packages/std_library.html#subprocess",
    "href": "chapters_python/8_modules_packages/std_library.html#subprocess",
    "title": "22  Standard Libraries",
    "section": "22.3 subprocess",
    "text": "22.3 subprocess\nsubprocess allows you to run programs from Python. The easiest way to use it is its run function.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Standard Libraries</span>"
    ]
  },
  {
    "objectID": "chapters_python/9_exceptions/exceptions.html",
    "href": "chapters_python/9_exceptions/exceptions.html",
    "title": "23  Python Code - Exceptions",
    "section": "",
    "text": "23.1 Resources",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Exceptions</span>"
    ]
  },
  {
    "objectID": "chapters_python/9_exceptions/exceptions.html#resources",
    "href": "chapters_python/9_exceptions/exceptions.html#resources",
    "title": "23  Python Code - Exceptions",
    "section": "",
    "text": "Real Python introductions to exceptions and tracebacks.\nErrors and exceptions in the official Python tutorial.\nBuilt in exceptions.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Exceptions</span>"
    ]
  },
  {
    "objectID": "chapters_python/9_exceptions/exceptions.html#syntax-errors",
    "href": "chapters_python/9_exceptions/exceptions.html#syntax-errors",
    "title": "23  Python Code - Exceptions",
    "section": "23.2 Syntax errors",
    "text": "23.2 Syntax errors\nWhen the Python interpreter finds invalid code it won’t be able to run the program, and it will generate a syntax error. These errors will try to inform you about where the error is in the code, so take a look at it.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Exceptions</span>"
    ]
  },
  {
    "objectID": "chapters_python/9_exceptions/exceptions.html#exceptions",
    "href": "chapters_python/9_exceptions/exceptions.html#exceptions",
    "title": "23  Python Code - Exceptions",
    "section": "23.3 Exceptions",
    "text": "23.3 Exceptions\nOnce the program in already running many different kind of problems might arise and Python will throw an exception in those cases.\n\n\n\n\n\n\nThere are different kind of exceptions.\nIndexError. In a sequence, you have tried to access an index out of range.\n\n\n\n\n\n\nKeyError. In a mapping, like a dictionary, you have tried to access a key that does not exist.\n\n\n\n\n\n\n\nValueError. The arguments given to the function are not correct.\n\n\n\n\n\n\n\n\nNameError. A variable has not been found in the available scopes.\n\n\n\n\n\n\n\n\nAttributeError is usually raised when you try to use a method or a property, an attribute, that the object does not have.\n\nAll these exceptions are accompanied by a traceback that informs you about the calls that have been done in the program up until the exceptions happened.\nTraceback (most recent call last):\n  File \"/home/jose/tmp/curso/file.py\", line 4, in &lt;module&gt;\n    do_division()\n  File \"/home/jose/tmp/curso/file.py\", line 2, in do_division\n    return 1 / 0\n           ~~^~~\nZeroDivisionError: division by zero",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Exceptions</span>"
    ]
  },
  {
    "objectID": "chapters_python/9_exceptions/exceptions.html#exception-control",
    "href": "chapters_python/9_exceptions/exceptions.html#exception-control",
    "title": "23  Python Code - Exceptions",
    "section": "23.4 Exception control",
    "text": "23.4 Exception control\nSometimes you are expecting that an exception might happen and you can deal with it. You can catch and deal with the exception using try and except.\n\n\n\n\n\n\nDo not write excepts without an particular exception type to catch. In general that would be a very bad practice because the exception catched could be an unexpected one.",
    "crumbs": [
      "Python",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Exceptions</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_3.html",
    "href": "chapters_python/exercises/exercises_3.html",
    "title": "24  Exercises 3",
    "section": "",
    "text": "24.1 Find the most common words\nDownload a text file, like Alice in wonderland from Project Gutenberg, count the number of time each word appears and print the 50 most common words.\nTake into account that the Alice in wonderland text really only starts after the line “CHAPTER I.” and ends with the line “THE END”.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Exercises 3</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_3.html#find-the-most-common-words",
    "href": "chapters_python/exercises/exercises_3.html#find-the-most-common-words",
    "title": "24  Exercises 3",
    "section": "",
    "text": "Tip\n\n\n\n\n\nA solution using a dictionary to keep the counts.\n\n\n\n\n\n\nA solution using the Counter class from the collections module.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Exercises 3</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_3.html#guess-the-number-game",
    "href": "chapters_python/exercises/exercises_3.html#guess-the-number-game",
    "title": "24  Exercises 3",
    "section": "24.2 Guess the number game",
    "text": "24.2 Guess the number game\nWrite a program that chooses a random number between 1 and 10 and asks the user to guess it several times. The program should finish once the user guesses correctly or once the number of available attemps has run out.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThe function randint of the random module creates random integers.\nYou can ask input from a user, like his guess, using the input function. Remember that the input function always return a string.\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Exercises 3</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_3.html#write-a-hangman-game",
    "href": "chapters_python/exercises/exercises_3.html#write-a-hangman-game",
    "title": "24  Exercises 3",
    "section": "24.3 Write a Hangman game",
    "text": "24.3 Write a Hangman game\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nimport random\n\nDICTIONARY = ['hola', 'caracola', 'casa', 'barco']\nINITIAL_NUM_ATTEMPS = 10\n\ndef create_revealed_string(secret_word, guessed_letters):\n\n    num_letters_missing = 0\n    revealed_string = ''\n    for letter in secret_word:\n        if letter.upper() in guessed_letters:\n            revealed_letter = letter\n        else:\n            revealed_letter = '-'\n            num_letters_missing += 1\n        revealed_string += revealed_letter\n    return revealed_string\n\n\ndef play_game():\n    secret_word = random.choice(DICTIONARY)\n    guessed_letters = set()\n    num_attempts = INITIAL_NUM_ATTEMPS\n    won = None\n    while True:\n        guessed_letter = input('Pick a letter ')\n        guessed_letters.add(guessed_letter.upper())\n\n        revealed_string = create_revealed_string(secret_word, guessed_letters)\n        num_attempts -= 1\n\n        num_letters_to_guess = revealed_string.count('-')\n        if not num_letters_to_guess:\n            won = True\n            break\n        elif num_letters_to_guess:\n            if num_attempts:\n                print('The guess so far: ', revealed_string, guessed_letters)\n            else:\n                won = False\n                break\n\n    if won:\n        print('Congratulations, you have won the game')\n    else:\n        print('You have lost')\n    print('The secret word was: ', secret_word)\n\n\nplay_game()",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Exercises 3</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_3.html#read-a-fasta-file",
    "href": "chapters_python/exercises/exercises_3.html#read-a-fasta-file",
    "title": "24  Exercises 3",
    "section": "24.4 Read a fasta file",
    "text": "24.4 Read a fasta file\nIn bioinformatics we use fasta files to store DNA sequences. This is an example of a fasta file with three sequences.\n&gt;seq1\nCGCTAGCTAGTCTATCGATCTAGTCTAGCT\n&gt;seq2 some description after the space\nTGTCGATCGTAGTCATCTGATCGACGTATCTA\nCTCGAGTCATGCTATCATCATGCTAG\n&gt;seq3\nTCAGTCGATGCTATCATCGTAGCTGATCGATCTGGCA\nCTAGCAGTCGATC\nWrite a program that reads the sequences found in a fasta file and stores them in a list of dictionaries, one dictionary per sequence.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow, create functions capable of calculating the percentage of GCs in the sequences and their lengths.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Exercises 3</span>"
    ]
  },
  {
    "objectID": "chapters_python/exercises/exercises_3.html#gene-expression",
    "href": "chapters_python/exercises/exercises_3.html#gene-expression",
    "title": "24  Exercises 3",
    "section": "24.5 Gene expression",
    "text": "24.5 Gene expression\nWe have done a study in which several patients have been given or not given (the placebo group) a drug. We have measured the expression of three genes and now we want to know which is the mean expression for each gene for the treated and placebo groups. We have also recorded the patient sex and we want the mean expression of each gene for males and females and the combined effect of sex and treament, so male-treated, male-placebo, female-treated, and female-placebo.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Exercises 3</span>"
    ]
  }
]