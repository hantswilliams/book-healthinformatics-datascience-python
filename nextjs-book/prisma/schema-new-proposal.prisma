// PROPOSED NEW SCHEMA - Hierarchical Book Structure with Access Control
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  firstName String?
  lastName  String
  password  String   // In production, this would be hashed
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  progress    Progress[]
  exercises   Exercise[]
  bookAccess  BookAccess[] // New: User's access to specific books

  @@map("users")
}

// NEW: Books model - Top level hierarchy
model Book {
  id          String   @id @default(cuid())
  slug        String   @unique // URL-friendly identifier like "python-healthcare"
  title       String   // "Python for Healthcare Data Science"
  description String?
  coverImage  String?  // Optional cover image URL
  difficulty  Difficulty @default(BEGINNER)
  estimatedHours Int?   // Estimated completion time
  isPublished Boolean  @default(false)
  order       Int      @unique // Global ordering of books
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  chapters    Chapter[]
  bookAccess  BookAccess[] // User access control
  progress    Progress[]   // User progress within this book

  @@map("books")
}

// UPDATED: Chapters now belong to Books
model Chapter {
  id          String @id
  bookId      String // NEW: Foreign key to Book
  title       String
  emoji       String
  order       Int    // Order within the book (not globally unique)
  markdownUrl String
  pythonUrl   String
  isPublished Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  book      Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  progress  Progress[]
  exercises Exercise[]

  // Ensure unique ordering within each book
  @@unique([bookId, order])
  @@map("chapters")
}

// NEW: User access control for books
model BookAccess {
  id       String @id @default(cuid())
  userId   String
  bookId   String
  accessType AccessType @default(READ) // READ, WRITE, ADMIN
  grantedAt DateTime @default(now())
  grantedBy String? // User ID who granted access (for audit trail)
  expiresAt DateTime? // Optional expiration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  // Ensure one access record per user per book
  @@unique([userId, bookId])
  @@map("book_access")
}

// UPDATED: Progress now tracks book-level progress
model Progress {
  id          String    @id @default(cuid())
  userId      String
  bookId      String    // NEW: Track progress per book
  chapterId   String
  completed   Boolean   @default(false)
  completedAt DateTime?
  timeSpent   Int?      // Optional: time spent in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  book    Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  // Ensure one progress record per user per chapter
  @@unique([userId, chapterId])
  @@map("progress")
}

// UPDATED: Exercises remain mostly the same but could be enhanced
model Exercise {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  title     String
  code      String
  isCorrect Boolean  @default(false)
  attempts  Int      @default(1)
  timeSpent Int?     // Optional: time spent on exercise in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

enum Role {
  ADMIN      // Can manage everything
  INSTRUCTOR // Can manage books and assign access
  STUDENT    // Can only access assigned books
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum AccessType {
  READ   // Can view content
  WRITE  // Can edit content (for instructors)
  ADMIN  // Full control over book
}