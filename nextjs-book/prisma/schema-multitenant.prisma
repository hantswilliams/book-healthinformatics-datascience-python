// Multi-Tenant SaaS Prisma Schema for Interactive Python Learning Platform
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NEW: Organization model - Tenant boundary and billing entity
model Organization {
  id          String   @id @default(cuid())
  name        String   // "Acme Healthcare", "QuantTrade Inc"
  slug        String   @unique // URL-friendly: "acme-healthcare"
  domain      String?  @unique // Optional: "acme.com" for auto-joining
  description String?
  logo        String?  // Logo URL
  website     String?
  industry    Industry @default(GENERAL) // Healthcare, Finance, etc.
  
  // Subscription & Billing (Owner pays for everything)
  stripeCustomerId       String? @unique
  stripeSubscriptionId   String? @unique
  subscriptionStatus     SubscriptionStatus @default(TRIAL)
  subscriptionTier       SubscriptionTier @default(STARTER)
  maxSeats              Int @default(5) // Based on subscription tier
  trialEndsAt           DateTime? // 14-day free trial
  subscriptionStartedAt DateTime?
  subscriptionEndsAt    DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]           // All users in this organization
  books       Book[]           // Organization's custom books
  invitations Invitation[]     // Pending user invitations
  bookAccess  BookAccess[]     // Access to shared/marketplace books
  billingEvents BillingEvent[] // Audit trail for billing

  @@map("organizations")
}

// UPDATED: Users now belong to organizations
model User {
  id             String   @id @default(cuid())
  username       String   @unique
  email          String   @unique
  firstName      String?
  lastName       String
  password       String   // Hashed in production
  avatar         String?  // Profile picture URL
  role           Role     @default(LEARNER)
  isActive       Boolean  @default(true) // Can be deactivated by org owner
  lastLoginAt    DateTime?
  onboardingCompleted Boolean @default(false)
  
  // Organization relationship
  organizationId String
  joinedAt       DateTime @default(now()) // When they joined the org
  invitedBy      String?  // User ID who invited them
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  progress     Progress[]
  exercises    Exercise[]
  bookAccess   BookAccess[] // Personal access to specific books
  createdBooks Book[]       @relation("BookCreator") // Books they created
  sentInvitations Invitation[] @relation("InvitedBy")

  @@map("users")
}

// NEW: User invitations system
model Invitation {
  id             String   @id @default(cuid())
  email          String
  organizationId String
  invitedBy      String   // User ID who sent the invitation
  role           Role     @default(LEARNER) // Role they'll have when they accept
  token          String   @unique // Secure token for invitation link
  expiresAt      DateTime // Invitations expire after 7 days
  acceptedAt     DateTime?
  createdAt      DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation("InvitedBy", fields: [invitedBy], references: [id])

  // One invitation per email per organization
  @@unique([email, organizationId])
  @@map("invitations")
}

// UPDATED: Books can be organization-specific or global
model Book {
  id          String   @id @default(cuid())
  slug        String   @unique // "python-healthcare-basics"
  title       String   // "Python for Healthcare Data Analysis"
  description String?
  coverImage  String?
  difficulty  Difficulty @default(BEGINNER)
  estimatedHours Int?
  category    BookCategory @default(GENERAL) // Healthcare, Finance, etc.
  tags        String?  // JSON array: ["pandas", "healthcare", "beginner"]
  
  // Content ownership and visibility
  organizationId String? // NULL = global/marketplace book, non-null = org-specific
  createdBy      String  // User who created this book
  isPublished    Boolean @default(false)
  isPublic       Boolean @default(false) // Can be shared in marketplace
  price          Int?    // Price in cents for marketplace books
  
  order       Int      // Display order
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User         @relation("BookCreator", fields: [createdBy], references: [id])
  chapters     Chapter[]
  bookAccess   BookAccess[] // Organization access control
  progress     Progress[]

  @@map("books")
}

// UPDATED: BookAccess now handles org-level access
model BookAccess {
  id             String @id @default(cuid())
  organizationId String // Organization that has access
  userId         String? // Optional: specific user access (for individual assignments)
  bookId         String
  accessType     AccessType @default(READ)
  grantedAt      DateTime @default(now())
  grantedBy      String? // User ID who granted access
  expiresAt      DateTime? // Optional expiration
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  book         Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)

  // Unique access per org per book, or per user per book
  @@unique([organizationId, bookId])
  @@map("book_access")
}

// Chapters remain largely the same
model Chapter {
  id          String @id
  bookId      String
  title       String
  emoji       String
  order       Int
  markdownUrl String
  pythonUrl   String
  isPublished Boolean @default(true)
  estimatedMinutes Int? // Time estimate for this chapter
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  book      Book       @relation(fields: [bookId], references: [id], onDelete: Cascade)
  progress  Progress[]
  exercises Exercise[]
  sections  Section[]  // NEW: Multiple sections per chapter

  @@unique([bookId, order])
  @@map("chapters")
}

// NEW: Sections within chapters for granular content organization
model Section {
  id        String      @id @default(cuid())
  chapterId String
  title     String?     // Optional section title
  type      SectionType // MARKDOWN or PYTHON
  order     Int         // Order within the chapter
  content   String      @db.Text // The actual markdown or python content
  fileUrl   String?     // Optional: URL to original file if needed
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([chapterId, order])
  @@map("sections")
}

// Progress tracking remains the same
model Progress {
  id          String    @id @default(cuid())
  userId      String
  bookId      String
  chapterId   String
  completed   Boolean   @default(false)
  completedAt DateTime?
  timeSpent   Int?      // Minutes spent
  score       Int?      // Optional scoring system
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  book    Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@map("progress")
}

// Exercises remain the same
model Exercise {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  title     String
  code      String
  isCorrect Boolean  @default(false)
  attempts  Int      @default(1)
  timeSpent Int?     // Seconds
  feedback  String?  // AI or instructor feedback
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

// NEW: Billing events for audit trail
model BillingEvent {
  id             String @id @default(cuid())
  organizationId String
  eventType      BillingEventType
  amount         Int?    // Amount in cents
  currency       String @default("usd")
  stripeEventId  String? // Stripe webhook event ID
  metadata       String? // JSON metadata
  createdAt      DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("billing_events")
}

// UPDATED: Enhanced role system
enum Role {
  OWNER      // Organization owner - handles billing, can invite/remove users
  ADMIN      // Can create/manage content, invite users (but not billing)
  INSTRUCTOR // Can assign content and view learner progress
  LEARNER    // Consumes content, tracks progress
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum AccessType {
  READ   // View content only
  WRITE  // Edit content
  ADMIN  // Full control over book
}

enum SubscriptionStatus {
  TRIAL      // Free trial period
  ACTIVE     // Paid and active
  PAST_DUE   // Payment failed
  CANCELED   // Canceled by user
  UNPAID     // Failed to pay
}

enum SubscriptionTier {
  STARTER    // $29/mo - 5 seats, basic features
  PRO        // $99/mo - 25 seats, advanced features
  ENTERPRISE // $299/mo - unlimited seats, custom features
}

enum Industry {
  GENERAL
  HEALTHCARE
  FINANCE
  TECHNOLOGY
  EDUCATION
  MANUFACTURING
  GOVERNMENT
  NON_PROFIT
}

enum BookCategory {
  GENERAL
  DATA_SCIENCE
  WEB_DEVELOPMENT
  MACHINE_LEARNING
  HEALTHCARE
  FINANCE
  GEOSPATIAL
  AUTOMATION
  API_DEVELOPMENT
}

enum BillingEventType {
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  INVOICE_CREATED
  TRIAL_STARTED
  TRIAL_ENDED
}

enum SectionType {
  MARKDOWN
  PYTHON
}